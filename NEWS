-- phpMyAdmin SQL Dump
-- version 4.4.13.1deb1
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Мар 16 2016 г., 16:09
-- Версия сервера: 5.6.28-0ubuntu0.15.10.1
-- Версия PHP: 5.6.11-1ubuntu3.1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `sbss`
--

DELIMITER $$
--
-- Процедуры
--
CREATE DEFINER=`root`@`localhost` PROCEDURE `CALC_PENALTY_VALUE`(in_req_id int)
BEGIN
    DECLARE done int DEFAULT FALSE;
    DECLARE timeline bigint DEFAULT 0;
    
    DECLARE _penaltyid int;
    DECLARE _requestid int;
    DECLARE _timediff bigint;
    DECLARE _timereaction int(3) DEFAULT 0;
    DECLARE _free_time bigint DEFAULT 0;
    DECLARE _time_elapsed bigint DEFAULT 0;
    DECLARE _penalty_value double DEFAULT 0;
    
    DECLARE history CURSOR FOR SELECT 
        `id`,
        `requestid`,
        TIMESTAMPDIFF(MINUTE, created_on, IF(closed_on IS NULL, NOW(), closed_on)),
        (`time` * 60),
        `free_time`,
        `time_elapsed`,
        `penalty_value`
        FROM `request_penalty_history` 
        WHERE `requestid` = IF(in_req_id > 0, in_req_id, `requestid`) AND IF(in_req_id > 0, 1, `closed_on` IS NULL)
        ORDER BY `created_on` ASC;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    IF in_req_id = 0 AND @@MAX_SP_RECURSION_DEPTH = 0 THEN
        SET @MAX_SP_RECURSION_DEPTH=@@MAX_SP_RECURSION_DEPTH, MAX_SP_RECURSION_DEPTH = 1;
    END IF;
    
    OPEN history;
    
    history_loop: LOOP
        FETCH history INTO 
            _penaltyid, 
            _requestid, 
            _timediff, 
            _timereaction,
            _free_time,
            _time_elapsed,
            _penalty_value;
        IF done THEN
            LEAVE history_loop;
        END IF;
    
        IF in_req_id > 0 THEN
            SET timeline = timeline + _timediff;
            
            IF timeline > _timereaction THEN
                UPDATE `request_penalty_history` 
                    SET `time_elapsed` = IF((timeline - _timereaction) > 0, (timeline - _timereaction), 0),
                    `free_time` = IF((_timereaction - timeline) < 0, 0, (_timereaction - timeline))
                    WHERE `id` = _penaltyid;
                
                UPDATE `request_penalty_history`
                    SET `penalty_value` = (`time_elapsed` * (`penalty` / (`quant` * 60)))
                    WHERE `id` = _penaltyid;
            ELSE
                UPDATE `request_penalty_history` SET `free_time` = (_timereaction - timeline), `time_elapsed` = 0 WHERE `id` = _penaltyid;
            END IF;
            
        ELSE
            CALL CALC_PENALTY_VALUE(_requestid);
            
            IF PROCEDURE_EXISTS('PENALTY_ADDON') THEN
                CALL PENALTY_ADDON(_requestid);
            END IF;
        END IF;
    END LOOP;
    
    CLOSE history;
    
    IF in_req_id = 0 AND @MAX_SP_RECURSION_DEPTH IS NOT NULL AND @@MAX_SP_RECURSION_DEPTH != @MAX_SP_RECURSION_DEPTH THEN
        SET MAX_SP_RECURSION_DEPTH = @MAX_SP_RECURSION_DEPTH;
    END IF;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SET_SUPPORT_POST_TIME_PENALTY`(in_req_id int(10), in_date_since datetime)
BEGIN
    DECLARE done int DEFAULT FALSE;
    DECLARE post_id int(10) DEFAULT 0;
    DECLARE status_id int(4) DEFAULT 0;
    DECLARE status_id_before int(4) DEFAULT 0;
    DECLARE post_created_on datetime;
    
    DECLARE _time tinyint(3) DEFAULT 0;
    DECLARE _quant tinyint(3) DEFAULT 0;
    DECLARE _spid int(5) DEFAULT 0;
    DECLARE _penalty double DEFAULT 0;
    DECLARE _penalty_active int(10) DEFAULT 0;
    
    DECLARE history CURSOR FOR SELECT 
        `id`, 
        `statusid`,
        `created_on` 
        FROM `request_posts` 
        WHERE `requestid` = in_req_id AND `created_on` >= IF(in_date_since IS NOT NULL, in_date_since, '0000-00-00 00:00:00');
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN history;
    
    history_loop: LOOP
        FETCH history INTO post_id, status_id, post_created_on;
        IF done THEN
            LEAVE history_loop;
        END IF;
        
        IF status_id_before != status_id AND status_id IS NOT NULL THEN
            SET _spid = GET_TIME_PENALTY(in_req_id, 'SPID', status_id);
            SET _time = @ESCALATION_INFO_TIME;
            SET _quant = @ESCALATION_INFO_QUANTTIME;
            SET _penalty = @ESCALATION_INFO_PENALTY;
        
            IF _time > 0 AND _spid > 0 THEN
                IF _penalty_active = 0 THEN
                    INSERT INTO `request_penalty_history` (`created_on`, `requestid`, `spid`, `quant`, `time`, `penalty`)
                        VALUES (post_created_on, in_req_id, _spid, _quant, _time, _penalty);
                    
                    SET _penalty_active = LAST_INSERT_ID();
                    
                    UPDATE `requests` SET `penaltyid` = _penalty_active WHERE `id` = in_req_id;
                END IF;
            ELSE
                IF _penalty_active > 0 THEN
                    UPDATE `request_penalty_history` SET `closed_on` = post_created_on WHERE `id` = _penalty_active;
                    
                    SET _penalty_active = 0;
                END IF;
            END IF;
        END IF;
        
        SET status_id_before = IF(status_id IS NULL, status_id_before, status_id);
    END LOOP;
    
    CLOSE history;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `SET_SUPPORT_REQUEST_TIME_PENALTY`()
BEGIN
    DECLARE done int DEFAULT FALSE;
    DECLARE request_id int(10) DEFAULT 0;
    DECLARE status_id int(4) DEFAULT 0;
    DECLARE priority_val tinyint(1) DEFAULT 3;
    DECLARE class_id int(4) DEFAULT 0;
    DECLARE request_date date;
    DECLARE sp_startdate date;
    DECLARE penalty_id int(10);
    
    DECLARE _time tinyint(3) DEFAULT 0;
    DECLARE _quant tinyint(3) DEFAULT 0;
    DECLARE _time_old tinyint(3) DEFAULT 0;
    DECLARE _spid int(5) DEFAULT 0;
    DECLARE _penalty double DEFAULT 0;
    DECLARE _penalty_old double DEFAULT 0;
    DECLARE _penalty_created_on datetime DEFAULT NULL;
    
    DECLARE history CURSOR FOR SELECT DISTINCT
            `r`.`id`, 
            `r`.`statusid`, 
            `r`.`priority`, 
            `r`.`classid`, 
            DATE(`r`.`created_on`), 
            `csp`.`startdate`,
            `r`.`penaltyid`
        FROM `requests` `r` 
        JOIN `service_pack_statuses` `sps` ON (`sps`.`statusid` = `r`.`statusid`)
        LEFT JOIN `client_service_packs` `csp` ON (`r`.`author_id` = `csp`.`clientid` AND NOW() BETWEEN  `csp`.`startdate` AND `csp`.`stopdate`)
        WHERE `r`.`author_type` = 1 AND `csp`.`serviceid` = `sps`.`spid`;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN history;
    
    history_loop: LOOP
        FETCH history INTO request_id, status_id, priority_val, class_id, request_date, sp_startdate, penalty_id;
        
        IF done THEN
            LEAVE history_loop;
        END IF;
        
        SET _spid = GET_TIME_PENALTY(request_id, 'SPID', status_id);
        SET _time = @ESCALATION_INFO_TIME;
        SET _quant = @ESCALATION_INFO_QUANTTIME;
        SET _penalty = @ESCALATION_INFO_PENALTY;
        
        SET _time_old = 0;
        SET _penalty_old = 0;
        SET _penalty_created_on = NULL;
        
        IF penalty_id IS NOT NULL AND penalty_id > 0 THEN
            IF _spid = 0 THEN
                UPDATE `request_penalty_history` SET `closed_on` = NOW() WHERE `id` = penalty_id;
                UPDATE `requests` SET `penalty_id` = NULL WHERE `id` = request_id;
            ELSE
               SELECT `created_on`, `time`, `penalty`
                   INTO _penalty_created_on, _time_old, _penalty_old 
               FROM `request_penalty_history` WHERE `id` = penalty_id;
               
               IF ((_penalty_created_on + INTERVAL _time HOUR) > NOW() 
                  AND (_penalty_created_on + INTERVAL _time_old HOUR) > NOW()) THEN
                  
                   UPDATE `request_penalty_history` SET `spid` = _spid,
                       `time` = _time,
                       `quant` = _quant,
                       `penalty` = _penalty
                   WHERE `id` = penalty_id;
               ELSE
                   IF _time_old != _time OR _penalty_old != _penalty THEN
                       UPDATE `request_penalty_history` SET `closed_on` = NOW() WHERE `id` = penalty_id;
                     
                       INSERT INTO `request_penalty_history` (`requestid`, `spid`, `quant`, `time`, `penalty`)
                           VALUES (request_id, _spid, _quant, _time, _penalty);
                     
                       UPDATE `requests` SET `penaltyid` = LAST_INSERT_ID() WHERE `id` = request_id;
                   END IF;
               END IF;
            END IF;
        ELSE
            IF _time > 0 AND _spid > 0 THEN
                 SELECT `a`.`value` INTO _penalty_created_on
                 FROM ((SELECT IF(`closed_on` IS NULL, `created_on`, `closed_on`) `value`
                    FROM `request_penalty_history` WHERE `requestid` = request_id ORDER BY `id` DESC LIMIT 1)
                    UNION (SELECT NULL)) `a` ORDER BY `a`.`value` DESC LIMIT 1;
            
                CALL SET_SUPPORT_POST_TIME_PENALTY(request_id, _penalty_created_on);
            END IF;
        END IF;
        
    END LOOP;
    
    CLOSE history;
END$$

--
-- Функции
--
CREATE DEFINER=`root`@`localhost` FUNCTION `COLUMN_EXISTS`(in_table varchar(32), in_col varchar(32)) RETURNS int(10) unsigned
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Наличие колонки в таблице'
BEGIN
	DECLARE FLAG tinyint(1) DEFAULT 0;
	SELECT 1 INTO FLAG FROM `INFORMATION_SCHEMA`.`COLUMNS` WHERE `TABLE_SCHEMA` = DATABASE() 
		AND `TABLE_NAME` = in_table AND `COLUMN_NAME` = in_col LIMIT 1;
	RETURN FLAG;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FOREIGN_NAME`(in_table varchar(32), in_col varchar(32)) RETURNS varchar(32) CHARSET latin1
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Возвращает уникальное имя ключа в указаной таблице и поле'
BEGIN
	DECLARE FLAG varchar(32) DEFAULT NULL;
	SELECT `CONSTRAINT_NAME` INTO FLAG FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` WHERE `TABLE_SCHEMA` = DATABASE() 
		AND `TABLE_NAME` = in_table AND `COLUMN_NAME` = in_col LIMIT 1;
	RETURN FLAG;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `FOREIGN_REFERENCED`(in_table varchar(32), in_col varchar(32), in_ref varchar(32)) RETURNS varchar(64) CHARSET latin1
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Возвращает имя на которое ссылается ключ'
BEGIN
    DECLARE FLAG varchar(64) DEFAULT NULL;
    
    SET in_ref = UPPER(in_ref);
    
    SELECT 
        IF(in_ref = 'SCHEMA', `REFERENCED_TABLE_SCHEMA`,
            IF(in_ref = 'TABLE', `REFERENCED_TABLE_NAME`,
                IF(in_ref = 'COLUMN', `REFERENCED_COLUMN_NAME`, NULL)
            )
        ) 
        INTO FLAG 
        FROM `INFORMATION_SCHEMA`.`KEY_COLUMN_USAGE` 
        WHERE `TABLE_SCHEMA` = DATABASE() 
            AND `TABLE_NAME` = in_table AND `COLUMN_NAME` = in_col LIMIT 1;
    
    RETURN FLAG;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GETVERSION`(in_ver char(5), in_flag int(1)) RETURNS int(10) unsigned
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Возвращает мажорную или минорную часть версии'
BEGIN
	DECLARE VER int(2) DEFAULT 0;
	
	SELECT MID(in_ver, LOCATE('.', in_ver)+1) INTO VER;
	
	IF in_flag = 1 THEN
		SELECT SUBSTR(in_ver, 1, LENGTH(in_ver) - LENGTH(VER) - 1) INTO VER;
	END IF;
	
	RETURN VER;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GET_PENALTY_VALUE`(in_since datetime, in_till datetime, in_time tinyint(3), in_penalty double) RETURNS double unsigned
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Расчет значения штрафа'
BEGIN
    DECLARE result double DEFAULT 0;
    
    IF in_since IS NOT NULL AND in_time IS NOT NULL AND in_time > 0 
       AND in_penalty IS NOT NULL AND in_penalty > 0 THEN
       
        SET result = FLOOR(GET_ELAPSED_VALUE(in_since, in_till) / in_time) * in_penalty;
    END IF;
    
    RETURN result;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `GET_TIME_PENALTY`(in_req_id int(10), in_flag char(9), status_id int(4)) RETURNS double unsigned
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Значение  времени, штрафа'
BEGIN
    DECLARE priority_val tinyint(1) DEFAULT 3;
    DECLARE rc_id int(4) DEFAULT 0;
    DECLARE com_id int(5) DEFAULT 0;
    DECLARE com_time tinyint(3) DEFAULT 0;
    DECLARE com_penalty double DEFAULT 0;
    DECLARE item_found tinyint(1) DEFAULT FALSE;
    DECLARE quanttime int DEFAULT 0;
    
    DECLARE result double DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET item_found = 0;
    
    SET in_flag = UPPER(in_flag);
    
    
    SELECT `priority`, `classid`, IF(status_id > 0, status_id, `statusid`) INTO priority_val, rc_id, status_id FROM `requests` WHERE `id` = in_req_id;
    
    
    SELECT 
        `final`.`spid`,
        `final`.`time`,
        `final`.`penalty`,
        `final`.`quant_time`,
        `final`.`item_found`
    INTO 
        com_id, 
        com_time, 
        com_penalty, 
        quanttime, 
        item_found
    FROM (
        SELECT * FROM (
            SELECT `rcp`.`spid` `spid`, 
                IF(`rcp`.`time` IS NOT NULL AND `rcp`.`time` > 0, `rcp`.`time`, `sp`.`reaction_time`) `time`,
                `rcp`.`penalty` `penalty`,
                `rcp`.`quant_time` `quant_time`,
                1 `item_found`
            FROM `request_class_penalty` `rcp`
            LEFT JOIN `service_packs` `sp` ON (`sp`.`id` = `rcp`.`spid`)
            LEFT JOIN `service_pack_statuses` `sps` ON (`sps`.`spid` = `rcp`.`spid`)
            WHERE `rcp`.`spid` IN (
                SELECT `csp`.`serviceid` 
                   FROM `client_service_packs` `csp` 
                   LEFT JOIN `requests` `r` ON (`r`.`author_id` = `csp`.`clientid` AND `r`.`author_type` = 1) 
                   WHERE `r`.`id` = in_req_id AND NOW() BETWEEN  `csp`.`startdate` AND `csp`.`stopdate`
            )
            AND `sps`.`statusid` = status_id 
            AND `rcp`.`priority` = priority_val
            AND `rcp`.`rcid` = 0
            ORDER BY `time` ASC LIMIT 1
        ) `tmp`
        UNION SELECT NULL, NULL, 0, 0, 0
    ) `final` ORDER BY `final`.`spid` DESC LIMIT 1;
    
    IF item_found = 0 THEN
        SELECT `sp`.`id`, `sp`.`reaction_time` `time`
            INTO com_id, com_time
            FROM `service_packs` `sp`
            LEFT JOIN `service_pack_statuses` `sps` ON (`sps`.`spid` = `sp`.`id`)
            WHERE `sp`.`id` IN (
                SELECT `csp`.`serviceid` 
                  FROM `client_service_packs` `csp` 
                   LEFT JOIN `requests` `r` ON (`r`.`author_id` = `csp`.`clientid` AND `r`.`author_type` = 1) 
                   WHERE `r`.`id` = in_req_id AND NOW() BETWEEN  `csp`.`startdate` AND `csp`.`stopdate`
            )
            AND `sps`.`statusid` = status_id
            ORDER BY `time` ASC LIMIT 1;
    END IF;
    
    SET item_found = 0;
    
    
    SELECT
        IF(`final`.`time` IS NOT NULL AND `final`.`time` > 0, `final`.`spid`, com_id),
        IF(`final`.`time` IS NOT NULL AND `final`.`time` > 0, `final`.`time`, com_time) `time`,
        IF(`final`.`penalty` > 0, `final`.`penalty`, com_penalty),
        IF(`final`.`quant_time` > 0, `final`.`quant_time`, quanttime),
        `final`.`item_found`
    INTO
        com_id,
        com_time,
        com_penalty,
        quanttime,
        item_found
    FROM
    (
        SELECT * FROM
            (SELECT
               `rcp`.`spid` `spid`,
               `rcp`.`time` `time`,
               `rcp`.`penalty` `penalty`,
               `rcp`.`quant_time` `quant_time`,
                1 `item_found`
            FROM `request_class_penalty` `rcp`
            LEFT JOIN `service_pack_statuses` `sps` ON (`sps`.`spid` = `rcp`.`spid`)
            WHERE `rcp`.`spid` IN (
                SELECT `csp`.`serviceid` 
                   FROM `client_service_packs` `csp` 
                   LEFT JOIN `requests` `r` ON (`r`.`author_id` = `csp`.`clientid` AND `r`.`author_type` = 1) 
                   WHERE `r`.`id` = in_req_id AND NOW() BETWEEN  `csp`.`startdate` AND `csp`.`stopdate`
            )
            AND `sps`.`statusid` = status_id
            AND `rcp`.`priority` = priority_val
            AND `rcp`.`rcid` = rc_id
            AND `rcp`.`time` > 0
            ORDER BY `time` ASC LIMIT 1
        ) `tmp`
        UNION SELECT NULL, NULL, 0, 0, 0
    ) `final` 
    ORDER BY `final`.`spid` DESC LIMIT 1;
    
    IF item_found = 0 AND in_flag = 'PENALTY' AND com_id > 0 THEN
        SELECT `rcp`.`penalty`
            INTO com_penalty
            FROM `request_class_penalty` `rcp`
            WHERE `rcp`.`spid` = com_id
                AND `rcp`.`priority` = priority_val
                AND `rcp`.`rcid` = rc_id
                AND `rcp`.`penalty` > 0
            ORDER BY `rcp`.`penalty` DESC LIMIT 1;
    END IF;
    
    
    SET @ESCALATION_INFO_SPID = com_id;
    SET @ESCALATION_INFO_STATUS = status_id;
    SET @ESCALATION_INFO_TIME = com_time;
    SET @ESCALATION_INFO_QUANTTIME = quanttime;
    SET @ESCALATION_INFO_PENALTY = com_penalty;
    
    CASE in_flag
        WHEN 'TIME' THEN SET result = com_time;
        WHEN 'QUANTTIME' THEN SET result = quanttime;
        WHEN 'PENALTY' THEN SET result = com_penalty;
        WHEN 'SPID' THEN SET result = com_id;
        WHEN 'STATUS' THEN SET result = status_id;
        ELSE
            BEGIN
            END;
    END CASE;
    
    RETURN result;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `PROCEDURE_EXISTS`(in_name varchar(255)) RETURNS bit(1)
    DETERMINISTIC
BEGIN
    SELECT COUNT(1) INTO @f_result
    FROM INFORMATION_SCHEMA.ROUTINES AS info
    WHERE info.ROUTINE_SCHEMA = DATABASE() AND info.ROUTINE_TYPE = 'PROCEDURE' AND info.ROUTINE_NAME = in_name;

    RETURN @f_result;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `STRIP_NON_DIGIT`(input VARCHAR(255)) RETURNS varchar(255) CHARSET latin1
    NO SQL
    DETERMINISTIC
    SQL SECURITY INVOKER
    COMMENT 'Расчет значения штрафа'
BEGIN
    DECLARE output   VARCHAR(255) DEFAULT '';
    DECLARE pos      INT          DEFAULT 0;
    DECLARE iterator INT          DEFAULT 1;

    WHILE iterator < (LENGTH(input) + 1) DO
        IF SUBSTRING(input, iterator, 1) = '+' THEN
            SET output = CONCAT(output, ',');
        ELSEIF SUBSTRING(input, iterator, 1) IN ( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '#' ) THEN
            SET output = CONCAT(output, SUBSTRING(input, iterator, 1));
        END IF;
        SET iterator = iterator + 1;
    END WHILE;

    IF SUBSTRING(output, 1, 1) = ',' THEN
        SET output = INSERT(output, 1, 1, '');
    END IF;

    RETURN output;
END$$

DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `activations`
--

CREATE TABLE IF NOT EXISTS `activations` (
  `keyid` int(11) DEFAULT NULL COMMENT 'Идентификатор ключа',
  `clientid` int(10) DEFAULT NULL COMMENT 'Идентификатор клиента',
  `versionid` int(10) DEFAULT NULL COMMENT 'Идентификатор версии',
  `activated` datetime DEFAULT NULL COMMENT 'Дата активации ключа',
  `name` varchar(32) DEFAULT NULL COMMENT 'Имя компании для которой произведена активация, передается инициатором',
  `expire` int(11) NOT NULL DEFAULT '0' COMMENT 'Ключ истакает',
  `user_limit` int(11) NOT NULL DEFAULT '0' COMMENT 'Ограничение по пользователям',
  `options` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Опции ключа',
  `from_ip` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'IP адрес с которого прошла активация',
  `hwcode` char(32) DEFAULT NULL COMMENT 'Аппартный код'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Активации ПО';

-- --------------------------------------------------------

--
-- Структура таблицы `banned`
--

CREATE TABLE IF NOT EXISTS `banned` (
  `from_ip` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Адрес с которого была произведена попытка активировать',
  `from_netmask` int(10) unsigned NOT NULL DEFAULT '4294967295' COMMENT 'Маска',
  `failures` int(11) NOT NULL DEFAULT '0' COMMENT 'Количество неудачных попыток',
  `banned` datetime DEFAULT NULL COMMENT 'Дата когда была произеведена блокировака адреса'
) ENGINE=MEMORY DEFAULT CHARSET=utf8 COMMENT='Неудачные активации';

-- --------------------------------------------------------

--
-- Структура таблицы `calls_stat`
--

CREATE TABLE IF NOT EXISTS `calls_stat` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `calldate` datetime DEFAULT NULL COMMENT 'Дата и время звонка',
  `caller` varchar(80) DEFAULT NULL COMMENT 'Номер вызывающего',
  `status` varchar(32) DEFAULT NULL COMMENT 'Статус звонка',
  `clientid` int(10) DEFAULT NULL COMMENT 'Номер принадлежит клиенту',
  `extdata` varchar(80) DEFAULT NULL COMMENT 'Дополнительная информация о клиенте',
  `callunique` double DEFAULT '0' COMMENT 'ID из внешней системы'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Информация о звонках';

-- --------------------------------------------------------

--
-- Структура таблицы `changelog`
--

CREATE TABLE IF NOT EXISTS `changelog` (
  `id` int(10) NOT NULL COMMENT 'Идентификтор записи',
  `tag` varchar(32) DEFAULT NULL COMMENT 'Уникальный код внутренней подверсии',
  `filter_tag` varchar(32) NOT NULL DEFAULT '' COMMENT 'Фильтр для флагов по тэгу. Если не указан, фильтр не применяется',
  `versionid` int(10) DEFAULT NULL COMMENT 'Идентификатор версии',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Дата создания или обновления записи',
  `text` text NOT NULL COMMENT 'Текст сообщения'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Журнал обновлений версий';

--
-- Триггеры `changelog`
--
DELIMITER $$
CREATE TRIGGER `client_added_changelogs` AFTER INSERT ON `changelog`
 FOR EACH ROW BEGIN
	
	DECLARE l_name varchar(30);
    DECLARE l_groupid int;
    DECLARE done boolean default FALSE;
    
    DECLARE fields_list CURSOR FOR SELECT `name`, `groupid` FROM `fields` WHERE `getvaluesfrom`=3;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN fields_list;
    FETCH fields_list INTO l_name, l_groupid;
    WHILE NOT done DO
    	INSERT INTO `fields_staff` SET `name` = l_name, `groupid`=l_groupid, `value`=NEW.`tag`, `tag`=NEW.`versionid`;
        SET done = FALSE;
        FETCH fields_list INTO l_name, l_groupid;
    END WHILE;
	
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `clients`
--

CREATE TABLE IF NOT EXISTS `clients` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор клиента',
  `login` varchar(32) NOT NULL DEFAULT '' COMMENT 'Логин клиента',
  `pass` varchar(41) NOT NULL DEFAULT '' COMMENT 'Пароль клиента',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания записи',
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Организация, 2 - физ. лицо',
  `classid` int(5) DEFAULT NULL COMMENT 'Класс клиента',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Полное имя клиента',
  `email` varchar(100) NOT NULL DEFAULT '' COMMENT 'E-mail',
  `phone` varchar(100) NOT NULL DEFAULT '' COMMENT 'Номер телефона',
  `comments` varchar(255) NOT NULL DEFAULT '' COMMENT 'Комментарий',
  `country` varchar(30) NOT NULL DEFAULT '' COMMENT 'Страна',
  `city` varchar(30) NOT NULL DEFAULT '' COMMENT 'Город',
  `address` varchar(150) NOT NULL DEFAULT '' COMMENT 'Адрес',
  `skipmailing` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Отказаться от рассылок',
  `cdocs` int(5) NOT NULL DEFAULT '0' COMMENT 'Количество документов. Заполняетсятриггером',
  `cmail` int(5) NOT NULL DEFAULT '0' COMMENT 'Количество писем. Заполняется триггером',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - клиент удален'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Клиенты';

--
-- Дамп данных таблицы `clients`
--

INSERT INTO `clients` (`id`, `login`, `pass`, `created`, `type`, `classid`, `name`, `email`, `phone`, `comments`, `country`, `city`, `address`, `skipmailing`, `cdocs`, `cmail`, `archive`) VALUES
(1, 'login-001', 'e4a5470ca3da01da47756c6f0ec024c9', '2012-12-13 08:26:25', 1, 1, 'ООО "Восход"', 'sunrise@samplemail.com', '8 (495) 000-00-00', '', 'Россия', 'Москва', '', 0, 0, 0, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `client_classes`
--

CREATE TABLE IF NOT EXISTS `client_classes` (
  `id` int(5) NOT NULL COMMENT 'Идентификатор класса',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название класса',
  `color` char(6) DEFAULT 'FF0000' COMMENT 'Цветовое оформление класса',
  `webaccess` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Разрешить клиенту этого класса доступ в личный кабиент, 0 - запретить',
  `requests` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Разрешить клиенту этого класса писать и просматривать сообщения, 0 - запретить',
  `software` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Разрешить клиенту этого класса просматривать и загружать ПО, 0 - запретить',
  `knowledges` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Разрешить клиенту этого класса просматривать раздел Знания',
  `activation` tinyint(1) NOT NULL DEFAULT '1' COMMENT '1 - Разрешить клиенту этого класса активировать ключ ПО',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - класс удален'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Классы клиентов';

--
-- Дамп данных таблицы `client_classes`
--

INSERT INTO `client_classes` (`id`, `name`, `color`, `webaccess`, `requests`, `software`, `knowledges`, `activation`, `archive`) VALUES
(1, 'Класс по умолчанию', 'FF0000', 1, 1, 1, 1, 1, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `client_documents`
--

CREATE TABLE IF NOT EXISTS `client_documents` (
  `id` int(11) NOT NULL COMMENT 'Порядковый номер записи в таблице',
  `filesize` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Размер в байтах загруженого файла',
  `internal_name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Имя файла на диске',
  `original_name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Орегинальное имя файла',
  `descr` varchar(150) NOT NULL COMMENT 'Описание документа',
  `managerid` int(10) DEFAULT NULL COMMENT 'Идентификатор менеджера загрузившего файл',
  `clientid` int(10) DEFAULT NULL COMMENT 'Идентификатор клиента которому принадлежит документ',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Документы прикрепленные к клиенту';

--
-- Триггеры `client_documents`
--
DELIMITER $$
CREATE TRIGGER `client_added_document` AFTER INSERT ON `client_documents`
 FOR EACH ROW BEGIN
	UPDATE `clients` SET `cdocs` = (`cdocs` + 1) WHERE `id` = NEW.`clientid`;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `client_removed_document` AFTER DELETE ON `client_documents`
 FOR EACH ROW BEGIN
	UPDATE `clients` SET `cdocs` = IF((`cdocs` - 1) < 0, 0, (`cdocs` - 1)) WHERE `id` = OLD.`clientid`;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `client_fields_vals`
--

CREATE TABLE IF NOT EXISTS `client_fields_vals` (
  `idx` int(3) DEFAULT NULL COMMENT 'Идентификатор значения в рамках поля',
  `clientid` int(10) NOT NULL COMMENT 'Идентификатор клиента',
  `groupid` int(10) DEFAULT NULL COMMENT 'Идентификатор группы, не обязательно',
  `name` varchar(32) NOT NULL COMMENT 'Уникальное имя дополнительного поля',
  `idxvalue` int(10) DEFAULT NULL COMMENT 'Идентификатор значения, если поле - список значение',
  `strvalue` varchar(255) NOT NULL COMMENT 'Значение текстового поля'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Значения дополнительных полей в рамках клиента';

--
-- Дамп данных таблицы `client_fields_vals`
--

INSERT INTO `client_fields_vals` (`idx`, `clientid`, `groupid`, `name`, `idxvalue`, `strvalue`) VALUES
(1, 1, 1, 'group1_email', NULL, 'ivanov@samplemail.com'),
(1, 1, 1, 'group1_fio', NULL, 'Иванов Петр Сергеевич'),
(1, 1, 1, 'group1_position', NULL, 'Системный администратор');

--
-- Триггеры `client_fields_vals`
--
DELIMITER $$
CREATE TRIGGER `client_fields_delete_used` AFTER DELETE ON `client_fields_vals`
 FOR EACH ROW BEGIN
	SELECT 1 INTO @FIELDUSED FROM `client_fields_vals` WHERE `name` = OLD.`name` LIMIT 1;
	IF @FIELDUSED IS NULL THEN
		UPDATE `fields` SET `used` = 0 WHERE `name` = OLD.`name`;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `client_fields_insert_used` AFTER INSERT ON `client_fields_vals`
 FOR EACH ROW BEGIN
	UPDATE `fields` SET `used` = 1 WHERE `name` = NEW.`name`;
	UPDATE `fields_groups` SET `used` = 1 WHERE `id` = NEW.`groupid`;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `client_fvals_increment` BEFORE INSERT ON `client_fields_vals`
 FOR EACH ROW BEGIN
	SELECT `type`, `groupid` INTO @FIELD_TYPE, @FIELD_GROUP FROM `fields` WHERE `name` = NEW.`name` AND `form` = 0;
	IF NEW.`groupid` IS NULL THEN
		SET NEW.`groupid` = @FIELD_GROUP;
	END IF;
	IF NEW.`idxvalue` = 0 OR @FIELD_TYPE IS NULL OR @FIELD_TYPE = 0 THEN
		SET NEW.`idxvalue` = NULL;
	END IF;
	IF @FIELD_TYPE = 1 THEN
		SET NEW.`strvalue` = '';
	END IF;
	SET @LAST_IDX = 0;
	IF NEW.`idx` IS NULL THEN
		SELECT `idx` INTO @LAST_IDX FROM `client_fields_vals` WHERE `name` = NEW.`name` AND `clientid` = NEW.`clientid` ORDER BY `idx` DESC LIMIT 1;
		IF @LAST_IDX IS NULL THEN
			SET NEW.`idx` = 1;
		ELSE
			SET NEW.`idx` = @LAST_IDX + 1;
		END IF;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `client_infoposts`
--

CREATE TABLE IF NOT EXISTS `client_infoposts` (
  `clientid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор клиента',
  `infopostid` int(5) NOT NULL DEFAULT '0' COMMENT 'Идентификатор информационного сообщения',
  `seendate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата просмотра'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Просмотры клиентом информационных сообщений';

-- --------------------------------------------------------

--
-- Структура таблицы `client_keys`
--

CREATE TABLE IF NOT EXISTS `client_keys` (
  `clientid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор клиента',
  `keyid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор ключа',
  `versionid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор версии'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Список привязанных ключей к клиентам';

-- --------------------------------------------------------

--
-- Структура таблицы `client_key_platforms`
--

CREATE TABLE IF NOT EXISTS `client_key_platforms` (
  `clientid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор клиента',
  `keyid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор ключа',
  `platformid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор ключа'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Список платформ включенных в лиц ключ';

--
-- Триггеры `client_key_platforms`
--
DELIMITER $$
CREATE TRIGGER `client_key_platforms_delete` BEFORE DELETE ON `client_key_platforms`
 FOR EACH ROW BEGIN
	IF @SBSS_DISABLE_TRIGGERS IS NULL OR @SBSS_DISABLE_TRIGGERS = 0 THEN
		SELECT `used` INTO @KEYISUSED FROM `license_keys` WHERE `id` = OLD.`keyid`;
		IF @KEYISUSED = 1 THEN
			CALL ERROR_KEY_IS_ACTIVATED();
		END IF;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `client_key_platforms_insert` BEFORE INSERT ON `client_key_platforms`
 FOR EACH ROW BEGIN
	IF @SBSS_DISABLE_TRIGGERS IS NULL OR @SBSS_DISABLE_TRIGGERS = 0 THEN
		SELECT `used` INTO @KEYISUSED FROM `license_keys` WHERE `id` = NEW.`keyid`;
		IF @KEYISUSED = 1 THEN
			CALL ERROR_KEY_IS_ACTIVATED();
		END IF;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `client_mail`
--

CREATE TABLE IF NOT EXISTS `client_mail` (
  `id` int(10) NOT NULL COMMENT 'Порядковый номер записи',
  `filename` varchar(128) DEFAULT NULL COMMENT 'Имя файла на диске',
  `filesize` int(10) unsigned DEFAULT NULL COMMENT 'Размер файла',
  `msg_id` varchar(64) DEFAULT NULL COMMENT 'Уникальный идентификатор письма в почтовой очереди',
  `msg_from` varchar(64) DEFAULT NULL COMMENT 'Отправитель',
  `msg_to` varchar(256) DEFAULT NULL COMMENT 'Получатель',
  `attachment` tinyint(4) DEFAULT NULL COMMENT 'Приложение письма',
  `subject` varchar(256) DEFAULT NULL COMMENT 'Тема письма',
  `date` datetime DEFAULT NULL COMMENT 'Дата записи в базу',
  `msg_date` datetime DEFAULT NULL COMMENT 'Дата письма',
  `managerid` int(10) DEFAULT NULL COMMENT 'Письмо связано с менеджером',
  `clientid` int(10) DEFAULT NULL COMMENT 'Письмо связано с клиентом'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Почта прикрепленная к клиентам';

--
-- Триггеры `client_mail`
--
DELIMITER $$
CREATE TRIGGER `client_added_mail` AFTER INSERT ON `client_mail`
 FOR EACH ROW BEGIN
	UPDATE `clients` SET `cmail` = (`cmail` + 1) WHERE `id` = NEW.`clientid`;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `client_removed_mail` AFTER DELETE ON `client_mail`
 FOR EACH ROW BEGIN
	UPDATE `clients` SET `cmail` = IF((`cmail` - 1) < 0, 0, (`cmail` - 1)) WHERE `id` = OLD.`clientid`;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `client_platforms`
--

CREATE TABLE IF NOT EXISTS `client_platforms` (
  `clientid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор клиента',
  `versionid` int(10) DEFAULT NULL COMMENT 'Идентификатор версии',
  `platformid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор платформы'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Список платформ доступных для скачивания';

-- --------------------------------------------------------

--
-- Структура таблицы `client_service_packs`
--

CREATE TABLE IF NOT EXISTS `client_service_packs` (
  `clientid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор клиента',
  `serviceid` int(5) NOT NULL DEFAULT '0' COMMENT 'Идентификатор сервисного пакета',
  `startdate` date NOT NULL DEFAULT '0000-00-00' COMMENT 'Дата начала действия сервисного пакета',
  `stopdate` date NOT NULL DEFAULT '9999-12-31' COMMENT 'Дата окончания действия сервисного пакета',
  `ttmsposts` int(5) NOT NULL DEFAULT '0' COMMENT 'Контролировать сообщения  и запретить писать по истечению срока действия пакета'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Сервисные пакеты включенные клиенту';

--
-- Дамп данных таблицы `client_service_packs`
--

INSERT INTO `client_service_packs` (`clientid`, `serviceid`, `startdate`, `stopdate`, `ttmsposts`) VALUES
(1, 1, '2012-12-01', '2017-12-01', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `client_sessions`
--

CREATE TABLE IF NOT EXISTS `client_sessions` (
  `id` varchar(32) NOT NULL COMMENT 'ID  Сессии',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания сессии',
  `timestamp` int(11) DEFAULT NULL COMMENT 'Время обновления сессии',
  `data` varchar(2048) DEFAULT NULL COMMENT 'Сериализованные данные',
  `client_id` int(11) DEFAULT NULL COMMENT 'Идентификатор пользователя если авторизован',
  `authorized` tinyint(1) DEFAULT '0' COMMENT '1 - сессия авторизована',
  `authorized_on` datetime DEFAULT NULL COMMENT 'Дата и время авторизации'
) ENGINE=MEMORY DEFAULT CHARSET=utf8 COMMENT='PHP Сессии клиентов';

-- --------------------------------------------------------

--
-- Структура таблицы `commerce_offer_templates`
--

CREATE TABLE IF NOT EXISTS `commerce_offer_templates` (
  `id` int(3) NOT NULL COMMENT 'Идентификатор записи',
  `template_path` varchar(150) DEFAULT NULL COMMENT 'Путь к файлу шаблона',
  `versionid` int(10) DEFAULT NULL COMMENT 'Версия продукта',
  `price_regionid` int(5) DEFAULT NULL COMMENT 'Регион'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Шаблоны коммерческих предложений (Версии и Регионы)';

-- --------------------------------------------------------

--
-- Структура таблицы `currency`
--

CREATE TABLE IF NOT EXISTS `currency` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор вылюты',
  `symbol` varchar(5) NOT NULL DEFAULT '$' COMMENT 'Краткое обозначение валюты',
  `name` varchar(32) DEFAULT NULL COMMENT 'Назнвание валюты',
  `main` tinyint(1) DEFAULT NULL COMMENT '1 - Валюта по умолчанию',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - валюта удалена'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Валюты системы';

--
-- Дамп данных таблицы `currency`
--

INSERT INTO `currency` (`id`, `symbol`, `name`, `main`, `archive`) VALUES
(1, 'руб', 'Рубль', NULL, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `currency_rate`
--

CREATE TABLE IF NOT EXISTS `currency_rate` (
  `curid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор валюты',
  `period` date NOT NULL DEFAULT '0000-00-00' COMMENT 'Дата установления курса',
  `value` double NOT NULL DEFAULT '0' COMMENT 'Значение курса'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Курс валюты';

-- --------------------------------------------------------

--
-- Структура таблицы `documents`
--

CREATE TABLE IF NOT EXISTS `documents` (
  `id` int(10) NOT NULL COMMENT 'Порядковый номер документа',
  `managerid` int(10) DEFAULT NULL COMMENT 'Идентификатор менеджера',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `doc_number` int(10) unsigned DEFAULT NULL COMMENT 'Внешний номер документа',
  `internal_name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Имя файла на диске',
  `original_name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Оригинальное имя файла',
  `template` varchar(32) DEFAULT NULL COMMENT 'Название файла шаблона на основании которого создан документ',
  `templateid` int(5) DEFAULT NULL COMMENT 'Идентификатор шаблона документа на основании которого был создан файл'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Реестр документов созданных системой';

-- --------------------------------------------------------

--
-- Структура таблицы `document_params`
--

CREATE TABLE IF NOT EXISTS `document_params` (
  `documentid` int(10) DEFAULT NULL COMMENT 'Идентификатор записи из реестра',
  `param` varchar(255) DEFAULT NULL COMMENT 'Название таблицы из которой взята опция',
  `value` varchar(255) DEFAULT NULL COMMENT 'Значение опции'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Таблицы и их значения которые легли в основу документа';

-- --------------------------------------------------------

--
-- Структура таблицы `duty_events`
--

CREATE TABLE IF NOT EXISTS `duty_events` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `managerid` int(10) DEFAULT NULL COMMENT 'Дежурный менеджер',
  `begintime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Время начала дежурства',
  `endtime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Время окончания дежурства',
  `callforwarding` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Переадресация, 0 - нет, 1 - да',
  `callforwarding_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Переадресовывать на: 0 - нет, 1 - офисный, 2 - мобильный, 3 - другой',
  `additional_number` varchar(150) DEFAULT '' COMMENT 'Дополнительный номер для переадресации'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Дежурства в расписании';

-- --------------------------------------------------------

--
-- Структура таблицы `events_log`
--

CREATE TABLE IF NOT EXISTS `events_log` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи в журнале',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `ip` int(10) unsigned DEFAULT NULL COMMENT 'Адрес с которого было инициировано действие',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Инициатор записи в лог: 0 - административный интерфейс, 1 - клиентский',
  `personid` int(10) NOT NULL COMMENT 'Идентификатор инициатора: 0 - менеджер, 1 - клиент',
  `action` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Действие: 0 - запрос, 1- добавление, 2 - обновление, 3 - удаление, 4 - авторизация',
  `uri` varchar(255) NOT NULL DEFAULT '' COMMENT 'URI к серверу',
  `cmd` varchar(150) NOT NULL DEFAULT '' COMMENT 'Функция в интерфейсе инициировавшая действие',
  `error` varchar(255) DEFAULT NULL COMMENT 'Сообщение об ошибке если операция была прервана',
  `descr` varchar(255) NOT NULL DEFAULT '' COMMENT 'Краткое описание операции'
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='Лог событий';

--
-- Дамп данных таблицы `events_log`
--

INSERT INTO `events_log` (`id`, `created`, `ip`, `type`, `personid`, `action`, `uri`, `cmd`, `error`, `descr`) VALUES
(1, '2016-03-16 12:02:50', 2130706433, 0, 0, 4, '/sbss/admin/index.php', 'authorize', NULL, '<%@ Authorization %>: admin'),
(2, '2016-03-16 12:03:28', 2130706433, 0, 0, 4, '/sbss/admin/index.php', 'authorize', NULL, '<%@ Authorization %>: admin'),
(3, '2016-03-16 13:09:08', 2130706433, 0, 0, 4, '/sbss/admin/index.php', 'authorize', NULL, '<%@ Authorization %>: admin'),
(4, '2016-03-16 13:09:26', 2130706433, 0, 1, 2, '/sbss/admin/index.php', 'setmanager', NULL, '<%@ Saving manager data %> Администратор (admin)'),
(5, '2016-03-16 13:09:30', 2130706433, 0, 0, 4, '/sbss/admin/index.php', 'authorize', NULL, '<%@ Authorization %>: admin');

-- --------------------------------------------------------

--
-- Структура таблицы `events_log_detail`
--

CREATE TABLE IF NOT EXISTS `events_log_detail` (
  `eventid` int(10) NOT NULL COMMENT 'Идентификатор записи в журнале',
  `table_name` varchar(150) NOT NULL COMMENT 'Название таблицы в которой были изменения',
  `action` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - Новая данные, 1 - Данные удалены, 2 - Изменены',
  `detail` text NOT NULL COMMENT 'Изменения'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Детализация лога';

-- --------------------------------------------------------

--
-- Структура таблицы `fields`
--

CREATE TABLE IF NOT EXISTS `fields` (
  `name` varchar(32) NOT NULL DEFAULT '' COMMENT 'Уникальное имя поля',
  `descr` varchar(255) NOT NULL COMMENT 'Текстовое описание поля',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - текстовое, 1 - список значений',
  `groupid` int(10) DEFAULT NULL COMMENT 'Идентификатор группы, не обязательно',
  `form` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Форма которой принадлежит группа: 0 - клиент, 1 - запрос',
  `fortype` tinyint(1) DEFAULT NULL COMMENT 'Тип клиента для которого поле показывается, превалирует настройка группы',
  `valid` varchar(32) DEFAULT NULL COMMENT 'Проверять текстовое поле по шаблону',
  `validhelp` varchar(150) DEFAULT NULL COMMENT 'Подсказака при проверке поля, если задана проверка',
  `mailer` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Разрешить просматривать модулю переписки это поле на предмет E-mail',
  `phone` tinyint(1) DEFAULT '0' COMMENT 'Признак номера телефона',
  `used` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - Поле используется и его тип изменять нельзя',
  `allow_client` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Дать доступ к этому полю клиенту',
  `getvaluesfrom` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Брать значения списка полей в случае комбобокса из: 1-версий, 2-платформ, 3-чейнджлога',
  `childrenfield` varchar(32) DEFAULT NULL COMMENT 'Связанное поле',
  `weight` tinyint(3) NOT NULL DEFAULT '0' COMMENT 'Вес поля при рендеринге',
  `phonedescrfield` varchar(32) DEFAULT NULL COMMENT 'Поле, в котором хранится описание для телефона'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Дополнительные поля для форм';

--
-- Дамп данных таблицы `fields`
--

INSERT INTO `fields` (`name`, `descr`, `type`, `groupid`, `form`, `fortype`, `valid`, `validhelp`, `mailer`, `phone`, `used`, `allow_client`, `getvaluesfrom`, `childrenfield`, `weight`, `phonedescrfield`) VALUES
('group1_email', 'E-mail', 0, 1, 0, NULL, '', '', 0, 0, 1, 1, 0, NULL, 0, NULL),
('group1_fio', 'ФИО', 0, 1, 0, NULL, '', '', 0, 0, 1, 1, 0, NULL, 0, NULL),
('group1_position', 'Должность', 0, 1, 0, NULL, '', '', 0, 0, 1, 1, 0, NULL, 0, NULL);

--
-- Триггеры `fields`
--
DELIMITER $$
CREATE TRIGGER `client_fields_update` BEFORE UPDATE ON `fields`
 FOR EACH ROW BEGIN
	IF OLD.`groupid` IS NOT NULL THEN
		SELECT `fortype` INTO @FIELDFORTYPE FROM `fields_groups` WHERE `id` = NEW.`groupid`;
		SET NEW.`fortype` = @FIELDFORTYPE;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `fields_groups`
--

CREATE TABLE IF NOT EXISTS `fields_groups` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор группы',
  `name` varchar(32) NOT NULL DEFAULT '' COMMENT 'Имя группы',
  `form` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Форма которой принадлежит группа: 0 - клиент, 1 - запрос',
  `fortype` tinyint(1) DEFAULT NULL COMMENT 'Тип клиента для которого эта группа показывается, NULL для всех',
  `clone` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Разрешить клонировать группу в рамках формы',
  `used` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Поля используются и принадлежность к форме изменять нельзя',
  `allow_client` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Дать доступ к этой группе клиенту',
  `showinpost` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Показать группу в запросе как дополнительную информацию',
  `format_tpl` varchar(1024) DEFAULT NULL COMMENT 'Возможное объединенное представление данных группы'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Группы дополнительных полей форм';

--
-- Дамп данных таблицы `fields_groups`
--

INSERT INTO `fields_groups` (`id`, `name`, `form`, `fortype`, `clone`, `used`, `allow_client`, `showinpost`, `format_tpl`) VALUES
(1, 'Сотрудник', 0, NULL, 0, 1, 1, 0, NULL);

--
-- Триггеры `fields_groups`
--
DELIMITER $$
CREATE TRIGGER `fields_groups_delete` AFTER DELETE ON `fields_groups`
 FOR EACH ROW BEGIN
	IF OLD.`form` = 0 THEN
		DELETE FROM `role_objects` WHERE `object` = CONCAT("clients.form.fieldset_", OLD.`id`);
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `fields_groups_insert` AFTER INSERT ON `fields_groups`
 FOR EACH ROW BEGIN
	IF NEW.`form` = 0 THEN
		INSERT INTO `role_objects` (`roleid`, `descr`, `object`, `permission`) SELECT `id`, NEW.`name`, CONCAT("clients.form.fieldset_", NEW.`id`), 2 FROM `roles`;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `fields_groups_update` BEFORE UPDATE ON `fields_groups`
 FOR EACH ROW BEGIN
	IF NEW.`form` = 0 THEN
		IF NEW.`fortype` > 0 AND (NEW.`fortype` <> OLD.`fortype` OR OLD.`fortype` IS NULL) THEN
			UPDATE `fields` SET `fortype` = NEW.`fortype` WHERE `groupid` = NEW.`id`;
		END IF;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `fields_staff`
--

CREATE TABLE IF NOT EXISTS `fields_staff` (
  `idx` int(10) NOT NULL COMMENT 'Идентификатор значение',
  `groupid` int(10) DEFAULT NULL COMMENT 'Идентификатор группы, не обязательно',
  `name` varchar(32) NOT NULL COMMENT 'Имя поля для которого это значение заведено',
  `value` varchar(255) NOT NULL COMMENT 'Значение',
  `tag` int(10) DEFAULT NULL COMMENT 'Тег для связывания поля',
  `filter` varchar(32) DEFAULT NULL COMMENT 'Фильтр для связывания поля'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Значения для полей-списков';

-- --------------------------------------------------------

--
-- Структура таблицы `filters`
--

CREATE TABLE IF NOT EXISTS `filters` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор фильтра',
  `name` varchar(32) NOT NULL DEFAULT '' COMMENT 'Название фильтра',
  `form` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Фильтр для: 0 - список клиентов, 1 - список запросов ',
  `ownerid` int(10) DEFAULT NULL COMMENT 'Владелец правила, если null - доступно для всех'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Фильтры для форм пользователей и списка запросов';

-- --------------------------------------------------------

--
-- Структура таблицы `filter_rules`
--

CREATE TABLE IF NOT EXISTS `filter_rules` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `filterid` int(10) DEFAULT NULL COMMENT 'ID фильтра',
  `type` tinyint(2) NOT NULL DEFAULT '1' COMMENT 'Тип правила',
  `logic` varchar(2) NOT NULL DEFAULT '==' COMMENT 'Логика проверки: == или !=',
  `value` varchar(4096) DEFAULT NULL COMMENT 'Данные для подстановки в условие'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Правила в фильтре';

-- --------------------------------------------------------

--
-- Структура таблицы `groups`
--

CREATE TABLE IF NOT EXISTS `groups` (
  `id` int(5) NOT NULL COMMENT 'Порядковый номер записи в таблице',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название группы',
  `leaderid` int(10) DEFAULT NULL COMMENT 'Руководитель группы'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Группы менеджеров';

-- --------------------------------------------------------

--
-- Структура таблицы `infoposts`
--

CREATE TABLE IF NOT EXISTS `infoposts` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `name` text NOT NULL COMMENT 'Название сообщения',
  `text` text NOT NULL COMMENT 'Текст сообщения',
  `managerid` int(10) DEFAULT NULL COMMENT 'Менеджер, создавший сообщение',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания сообщения',
  `atop` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Показывать сообщение сверху',
  `confirmation` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Требовать подтверждения о прочтении от клиента',
  `weight` tinyint(3) NOT NULL DEFAULT '0' COMMENT 'Вес сообщения при показе (актуально для сообщений с atop=1)',
  `publish` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Показывать сообщение клиенту'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Сообщения в клиентском кабинете';

-- --------------------------------------------------------

--
-- Структура таблицы `infoposts_client_class`
--

CREATE TABLE IF NOT EXISTS `infoposts_client_class` (
  `infopostid` int(4) NOT NULL COMMENT 'Группа рассылки',
  `clientclassid` int(5) NOT NULL COMMENT 'Класс клиента'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Класс клиента, которому будет показано информационное сообще';

-- --------------------------------------------------------

--
-- Структура таблицы `knowledges`
--

CREATE TABLE IF NOT EXISTS `knowledges` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `name` varchar(150) DEFAULT '' COMMENT 'Тема',
  `classid` int(4) DEFAULT NULL COMMENT 'Класс запроса',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания записи',
  `managerid` int(10) DEFAULT NULL COMMENT 'Менеджер создавший запись',
  `edited` datetime NOT NULL COMMENT 'Дата и время изменения записи',
  `editorid` int(10) DEFAULT NULL COMMENT 'Последний менеджер изменивший запись',
  `publish` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - Опубликовать тему в клиентском интерфейсе'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='База знаний (FAQ)';

-- --------------------------------------------------------

--
-- Структура таблицы `knowledge_posts`
--

CREATE TABLE IF NOT EXISTS `knowledge_posts` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `knowledgeid` int(10) DEFAULT NULL COMMENT 'Идентификатор знания к которому привязано сообщение',
  `managerid` int(10) DEFAULT NULL COMMENT 'Идентификатор мереджера, создавшего сообщение',
  `createdon` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания сообщения',
  `text` text NOT NULL COMMENT 'Текст сообщения',
  `spec` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1- Служебное'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Сообщениея в базе знаний (FAQ)';

-- --------------------------------------------------------

--
-- Структура таблицы `knowledge_post_files`
--

CREATE TABLE IF NOT EXISTS `knowledge_post_files` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `postid` int(10) DEFAULT NULL COMMENT 'Идентификатор сообщения',
  `knowledgeid` int(10) DEFAULT NULL COMMENT 'Идентификатор знания',
  `filesize` int(11) NOT NULL DEFAULT '0' COMMENT 'Размер файла в байтах',
  `filename` varchar(150) NOT NULL DEFAULT '' COMMENT 'Оригинальное имя файла',
  `document_name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название документа',
  `managerid` int(10) DEFAULT NULL COMMENT 'Идентификатор менеджера',
  `createdon` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания записи'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Файлы в базе знаний';

-- --------------------------------------------------------

--
-- Структура таблицы `license_keys`
--

CREATE TABLE IF NOT EXISTS `license_keys` (
  `id` int(11) NOT NULL COMMENT 'Идентификатор записи о ключе',
  `key` varchar(32) DEFAULT NULL COMMENT 'Уникальный набор символов ключа',
  `managerid` int(10) DEFAULT NULL COMMENT 'Менеджер создавший ключ',
  `comment` varchar(64) NOT NULL COMMENT 'Комментарий к ключу',
  `used` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - ключ активирован, 2 - удален',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания ключа'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Список выписанных лицензионных ключей';

--
-- Триггеры `license_keys`
--
DELIMITER $$
CREATE TRIGGER `gen_key` BEFORE INSERT ON `license_keys`
 FOR EACH ROW BEGIN
	IF NEW.`key` IS NULL THEN 
		SET NEW.`key` = INSERT(INSERT(INSERT(INSERT(LEFT(UCASE(CONVERT(MD5(ENCRYPT(RAND())) USING latin1)),24),5,1,'-'),10,1,'-'),15,1,'-'),20,1,'-'); 
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `license_keys_staff`
--

CREATE TABLE IF NOT EXISTS `license_keys_staff` (
  `keyid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор ключа',
  `optionid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор опции',
  `value` varchar(150) DEFAULT NULL COMMENT 'Значение опции в ключе'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Список выписанных лицензионных ключей';

-- --------------------------------------------------------

--
-- Структура таблицы `license_options`
--

CREATE TABLE IF NOT EXISTS `license_options` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор опции',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название опции',
  `type` tinyint(1) DEFAULT NULL COMMENT 'Тип опции;; 0 - текстовое, 1 - булевое',
  `versionid` int(10) DEFAULT NULL COMMENT 'Идентификатор версии, не обязательно',
  `cost` double DEFAULT NULL COMMENT 'Стоимость опции',
  `price_groupid` int(3) DEFAULT NULL COMMENT 'Включить платформу в прайсовую группу'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Опции лицензии';

--
-- Триггеры `license_options`
--
DELIMITER $$
CREATE TRIGGER `license_options_after_update` BEFORE UPDATE ON `license_options`
 FOR EACH ROW BEGIN
	IF NEW.`type` > 0 AND OLD.`type` <> NEW.`type` THEN
		UPDATE `platform_cost` SET `archive` = 1 WHERE `archive` <> 1 AND `optionid` = NEW.`id`;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `mailing`
--

CREATE TABLE IF NOT EXISTS `mailing` (
  `id` int(4) NOT NULL COMMENT 'Идентификатор записи',
  `name` varchar(150) NOT NULL COMMENT 'Название группы',
  `always_receive` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Клиенты этой группы рассылки поумолчанию получают письма'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Группы Email рассылок';

-- --------------------------------------------------------

--
-- Структура таблицы `mailing_client_class`
--

CREATE TABLE IF NOT EXISTS `mailing_client_class` (
  `mailingid` int(4) NOT NULL COMMENT 'Группа рассылки',
  `clientclassid` int(5) NOT NULL COMMENT 'Класс клиента'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Класс клиента включенного в группу рассылки';

-- --------------------------------------------------------

--
-- Структура таблицы `mailing_posts`
--

CREATE TABLE IF NOT EXISTS `mailing_posts` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `mailingid` int(4) DEFAULT NULL COMMENT 'Группа рассылки',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `maildate` datetime DEFAULT NULL COMMENT 'Дата последней рассылки сообщения',
  `subject` varchar(250) NOT NULL DEFAULT '' COMMENT 'Тема сообщения',
  `text` text NOT NULL COMMENT 'Текст сообщения',
  `managerid` int(10) DEFAULT NULL COMMENT 'Менеджер создавший сообщение'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Сообщения отправленные через рассылку';

-- --------------------------------------------------------

--
-- Структура таблицы `managers`
--

CREATE TABLE IF NOT EXISTS `managers` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор менеджера',
  `login` varchar(32) NOT NULL DEFAULT '' COMMENT 'Логин менеджра',
  `pass` varchar(41) NOT NULL DEFAULT '' COMMENT 'Пароль менеджра',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Полное имя менеджера',
  `email` varchar(150) NOT NULL DEFAULT '' COMMENT 'Электронный адрес',
  `mobile` varchar(64) NOT NULL DEFAULT '' COMMENT 'Мобильный телефон',
  `phone` varchar(64) NOT NULL DEFAULT '' COMMENT 'Номер телефона',
  `descr` varchar(255) NOT NULL DEFAULT '' COMMENT 'Описание',
  `enabled` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Состояние менеджера: 1 - активирован, 0 - отключен',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - менеджер удален',
  `redmine_id` int(10) DEFAULT NULL COMMENT 'Идентификатор менеджера в Redmine',
  `redmine_key` varchar(64) DEFAULT NULL COMMENT 'Ключ для авторизации в Redmine через API',
  `duty` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Показывать в списке дежурных'
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='Менеджеры системы';

--
-- Дамп данных таблицы `managers`
--

INSERT INTO `managers` (`id`, `login`, `pass`, `name`, `email`, `mobile`, `phone`, `descr`, `enabled`, `archive`, `redmine_id`, `redmine_key`, `duty`) VALUES
(1, 'admin', '21232f297a57a5a743894a0e4a801fc3', 'Администратор', '', '', '', '', 1, 0, 0, '', 0),
(2, 'sense', 'f5743daa1b0c190dc25ac146a657932e', 'Чернышев Алексей', 'init@yarteleservice.ru', '', '', '', 1, 0, 0, '', 0),
(3, 'anton', '784742a66a3a0c271feced5b149ff8db', 'Меньшенин Антон', 'antonmenshenin@gmail.com', '', '', '', 1, 0, 0, '', 0),
(4, 'haburin.s', '3f5bf43b9e5687d9be35ad60781d0f69', 'Хабурин Сергей', 'kabeltv-shek@mail.ru', '', '', '', 1, 0, 0, '', 0),
(5, 'teh', '38b5a6b9dafc7fc2955561cd08fe1f77', 'Служба техподдержки', '', '', '', '', 0, 0, 0, '', 0);

--
-- Триггеры `managers`
--
DELIMITER $$
CREATE TRIGGER `managers_after_update` AFTER UPDATE ON `managers`
 FOR EACH ROW BEGIN
	IF NEW.`archive` = 1 or NEW.`enabled` = 0 THEN
		DELETE FROM `manager_groups` WHERE `managerid` = NEW.`id`;
		UPDATE `groups` SET `leaderid` = NULL WHERE `leaderid` = NEW.`id`;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `managers_before_update` BEFORE UPDATE ON `managers`
 FOR EACH ROW BEGIN
	IF NEW.`archive` = 1 or NEW.`enabled` = 0 THEN
		SET NEW.duty = 0;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `manager_groups`
--

CREATE TABLE IF NOT EXISTS `manager_groups` (
  `groupid` int(5) NOT NULL COMMENT 'Номер группы',
  `managerid` int(10) NOT NULL COMMENT 'Идентификатор менеджера'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Группы, в которые входит менеджер';

-- --------------------------------------------------------

--
-- Структура таблицы `manager_roles`
--

CREATE TABLE IF NOT EXISTS `manager_roles` (
  `roleid` int(5) NOT NULL COMMENT 'Номер роли',
  `managerid` int(10) NOT NULL COMMENT 'Идентификатор менеджера'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Роли назначенные менеджеру';

-- --------------------------------------------------------

--
-- Структура таблицы `modules`
--

CREATE TABLE IF NOT EXISTS `modules` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор модуля',
  `platformid` int(10) DEFAULT NULL COMMENT 'Модуль входит в состав платформы',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название модуля',
  `descr` varchar(250) NOT NULL DEFAULT '' COMMENT 'Описание',
  `code` varchar(32) DEFAULT NULL COMMENT 'Внешний код модуля',
  `download` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Флаг указывающий доступность отгрузки модуля в виде файла',
  `prefix` varchar(64) NOT NULL DEFAULT '' COMMENT 'Токен в имени файла связывающий этот модуль',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - модуль удален'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Доступные платформы';

-- --------------------------------------------------------

--
-- Структура таблицы `notifications`
--

CREATE TABLE IF NOT EXISTS `notifications` (
  `id` varchar(64) NOT NULL COMMENT 'Идентификтор записи, уникальное имя шаблона',
  `name` varchar(150) NOT NULL COMMENT 'Описание шаблона',
  `options` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Опции шаблона (цифровое значение), в каждом шаблоне значение определяется кодом. Для всех 0 - отключен',
  `subject` text NOT NULL COMMENT 'Тема письма',
  `text` text NOT NULL COMMENT 'Шаблон уведомления'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Уведомления системы. Настройка';

--
-- Дамп данных таблицы `notifications`
--

INSERT INTO `notifications` (`id`, `name`, `options`, `subject`, `text`) VALUES
('client.restorepass', 'Уведомление о восстановлении пароля по запросу клиента', 2, '<tpl sql="SELECT `name` FROM `clients` WHERE `id` = ''#clientid#''">{name}</tpl>, Вы запросили временный доступ', '<html>\n<header>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n</header>\n<style type=text/css>\nbody {font-family:''Arial'';font-size:12px;}     \ndiv {margin-top:10px;}   \ntable {border-top:solid 1px black;border-left:solid 1px black;}     \ntd {border-bottom:solid 1px black; border-right:solid 1px black;padding:4px;}     \n.bold {font-weight:bold;} \n</style>\n<body>\n<div><tpl sql="SELECT `name` FROM `clients` WHERE `id` = ''#clientid#''">{name}</tpl></div>\n<div>Вы запросили временный доступ для смены доступа в личный кабинет.</div>\n<div>Чтобы завершить действие Вам нужно пройти по указанной ниже ссылке и изменить атрибуты доступа в разделе своих данных</div>\n<div><a href="{url}">{url}</a><div>\n<div class="bold">Внимание!</div>       \n<div>Ссылка действует в течении часа с момента запроса. Вы должны проследовать по ней с того персонального компьютера и браузера с которого был осуществлен запрос</div>\n</body>\n</html>'),
('requests.clientreply', 'Уведомлять менеджера об ответах клиента', 2, 'Уведомление менеджеру <tpl sql="SELECT `name` `managername` FROM `managers` WHERE `id`=''#managerid#''">{managername}</tpl> Запрос №{requestid}', '<html>\n<header>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n</header>\n<style type=text/css>\nbody { font-family: ''Arial''; font-size: 12px; }\ndiv { margin-top: 10px; }\ntable { border-top: solid 1px black; border-left: solid 1px black; }\ntd { border-bottom: solid 1px black; border-right: solid 1px black; padding: 4px; }\n</style>\n<body>\n<div>Уважаемый <tpl sql="SELECT `name` `managername` FROM `managers` WHERE `id`=''#managerid#''">{managername}</tpl>, Вы назначены ответственным в запросе <a href="{url}">{requestid}</a></div>\n<tpl sql="SELECT `rs`.`descr` `statusname` FROM `requests` `r` LEFT JOIN `request_statuses` `rs` ON (`rs`.`id` = `r`.`statusid`) WHERE `r`.`id` = ''#requestid#''"><div>Текущий статус запроса: {statusname}</div></tpl>\n\n<div>\nУ этого клиента следующие сервисные пакеты:\n</div>\n<table cellspacing=0 cellpadding=0>\n<tr><td>Код сервисного пакета</td><td>Начало оказания</td><td>Окончание оказания</td></tr>\n<tpl sql="SELECT `sp`.`code` `servicecode`, date_format(`csp`.`startdate`, ''%d.%m.%Y'') `startdate`, date_format(`csp`.`stopdate`, ''%d.%m.%Y'') `stopdate` FROM `client_service_packs` `csp`  LEFT JOIN `service_packs` `sp` ON (`sp`.`id` = `csp`.`serviceid`) WHERE NOW() BETWEEN `csp`.`startdate` AND `csp`.`stopdate` AND `csp`.`clientid` = ''#clientid#'' GROUP BY `clientid`, `serviceid` ">\n<tr><td>{servicecode}</td><td>{startdate}</td><td>{stopdate}</td></tr>\n</tpl>\n</table>\n\n<div>\n<hr>\nПоследнее сообщение от менеджера:\n<tpl sql="SELECT date_format(`created_on`, ''%d.%m.%Y %H:%i'') `started`, `text` FROM `request_posts` WHERE `requestid` = ''#requestid#'' AND `author_type` = 0 AND `spec` = 0 ORDER BY id DESC LIMIT 1">\n({started}):\n<p>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("<pre>") : '''';  ]}\n{text}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("</pre>") : '''';  ]}\n</p>\n</tpl>\n</div>\n\n<tpl sql="SELECT date_format(`created_on`, ''%d.%m.%Y %H:%i'') `created`, `text` FROM `request_posts` WHERE `requestid` = ''#requestid#'' AND `spec` = 0 AND `author_type` = 1 ORDER BY `id` DESC LIMIT 1">\n<div>\n<hr>\nПоследнее сообщение от клиента ({created}):\n<div>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("<pre>") : '''';  ]}\n{text}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("</pre>") : '''';  ]}\n</div>\n</div>\n</tpl>\n</body>\n</html>'),
('requests.managercopy', 'Отправлять копию сообщения менеджеру если отмечен', 2, 'Уведомление менеджеру <tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#manid#''">{name}</tpl> Запрос №{requestid}', '<html>\n<header>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n</header>\n<style type=text/css>\nbody { font-family: ''Arial''; font-size: 12px; }\ndiv { margin-top: 10px; }\ntable { border-top: solid 1px black; border-left: solid 1px black; }\ntd { border-bottom: solid 1px black; border-right: solid 1px black; padding: 4px; }\n</style>\n<body>\n<div>Уважаемый <tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#manid#''">{name}</tpl>, Вам скопировано сообщение в запросе <a href="{url}">{requestid}</a></div>\n<tpl sql="SELECT `rs`.`descr` `statusname` FROM `requests` `r` LEFT JOIN `request_statuses` `rs` ON (`rs`.`id` = `r`.`statusid`) WHERE `r`.`id` = ''#requestid#''"><div>Текущий статус запроса: {statusname}</div></tpl>\n<tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#managerid#''">\n<div>Назначение произвел: {name}</div>\n</tpl>\n\n<div>\nПоследнее сообщение от менеджера\n<p>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''posttext'']) ? print("<pre>") : '''';  ]}\n{posttext}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''posttext'']) ? print("</pre>") : '''';  ]}\n</p>\n</div>\n\n<div>\n\n<tpl sql="SELECT date_format(`created_on`, ''%d.%m.%Y %H:%i'') `created`, `text` FROM `request_posts` WHERE `requestid` = ''#requestid#'' AND `spec` = 0 AND `author_type` = ''#authortype#'' ORDER BY `id` DESC LIMIT 1">\n<hr>\n<div>\nПоследнее сообщение от клиента ({created}):\n<div>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("<pre>") : '''';  ]}\n{text}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("</pre>") : '''';  ]}\n</div>\n</div>\n</tpl>\n</body>\n</html>'),
('requests.managerreply', 'Уведомлять клиента об ответах менеджера', 2, 'Уведомление для <tpl if="''{authortype}'' ==0"><tpl sql="SELECT `name` FROM `managers` WHERE `id` = ''#authorid#''">{name}</tpl></tpl><tpl if="''{authortype}''==1"><tpl sql="SELECT `name` FROM `clients` WHERE `id` = ''#authorid#''">{name}</tpl></tpl>. Запрос №{requestid}', '<html>\n<header>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n</header>\n<style type=text/css>\nbody { font-family: ''Arial''; font-size: 12px; }\ndiv { margin-top: 10px; }\ntable { border-top: solid 1px black; border-left: solid 1px black; }\ntd { border-bottom: solid 1px black; border-right: solid 1px black; padding: 4px; }\n</style>\n<body>\n<tpl if="''{authortype}'' == 0"><tpl sql="SELECT `name` `__global__authorname` FROM `managers` WHERE `id` = ''#authorid#''"></tpl></tpl>\n<tpl if="''{authortype}'' == 1"><tpl sql="SELECT `name` `__global__authorname` FROM `clients` WHERE `id` = ''#authorid#''"></tpl></tpl>\n<div>{authorname}</div>\n<tpl if="''{statusold}'' != ''{statusnew}''">\n<div>Статус Вашего запроса <tpl if="''{authortype}'' == 0"><a href="{adminurl}"></tpl><tpl if="''{authortype}'' == 1"><a href="{clienturl}"></tpl>{requestid}</a> был изменен {[ echo date("d.m.Y"); ]}</div>\n<div>Текущий статус: <tpl sql="SELECT `descr` FROM `request_statuses` WHERE `id` = ''#statusnew#''">{descr}</tpl></div>\n(<span>Предыдущий статус: <tpl sql="SELECT `descr` FROM `request_statuses` WHERE `id` = ''#statusold#''">{descr}</tpl></span>)\n</tpl>\n<tpl if="$params[''message'']">\n<div>В запросе <tpl if="''{authortype}'' == 0"><a href="{adminurl}"></tpl><tpl if="''{authortype}'' == 1"><a href="{clienturl}"></tpl>{requestid}</a> оставлено следующее сообщение службой технической поддержки:</div>\n<div>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''message'']) ? print("<pre>") : '''';  ]}\n{message}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''message'']) ? print("</pre>") : '''';  ]}\n</div>\n</tpl>\n</body>\n</html>'),
('requests.responsibleman', 'Уведомлять менеджера о смене отвественного', 2, 'Уведомление менеджеру <tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#managerid#''">{name}</tpl> Запрос №{requestid}', '<html>\n<header>\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n</header>\n<style type=text/css>\nbody { font-family: ''Arial''; font-size: 12px; }\ndiv { margin-top: 10px; }\ntable { border-top: solid 1px black; border-left: solid 1px black; }\ntd { border-bottom: solid 1px black; border-right: solid 1px black; padding: 4px; }\n</style>\n<body>\n\n<div>Уважаемый <tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#responsible#''">{name}</tpl>, Вы назначены ответственным в запросе <a href="{url}">{requestid}</a></div>\n<tpl sql="SELECT `rs`.`descr` `statusname` FROM `requests` `r` LEFT JOIN `request_statuses` `rs` ON (`rs`.`id` = `r`.`statusid`) WHERE `r`.`id` = ''#requestid#''"><div>Текущий статус запроса: {statusname}</div></tpl>\n<tpl sql="SELECT `name` FROM `managers` WHERE `id`=''#managerid#''">\n<div>Назначение произвел: {name}</div>\n</tpl>\n\n<tpl if="$params[''authortype'']==1">\n<div>\nУ этого клиента следующие сервисные пакеты:\n</div>\n<table cellspacing=0 cellpading=0>\n<tr><td>Код сервисного пакета</td><td>Начало оказания</td><td>Окончание оказания</td></tr>\n<tpl sql="SELECT `sp`.`code` `servicecode`, date_format(`csp`.`startdate`, ''%d.%m.%Y'') `startdate`, date_format(`csp`.`stopdate`, ''%d.%m.%Y'') `stopdate` FROM `client_service_packs` `csp`  LEFT JOIN `service_packs` `sp` ON (`sp`.`id` = `csp`.`serviceid`) WHERE NOW() BETWEEN `csp`.`startdate` AND `csp`.`stopdate` AND `csp`.`clientid` = ''#authorid#'' GROUP BY `clientid`, `serviceid` ">\n<tr><td>{servicecode}</td><td>{startdate}</td><td>{stopdate}</td></tr>\n</tpl>\n</table>\n</tpl>\n\n<div>\n<hr>\nПоследнее сообщение от менеджера\n<tpl sql="SELECT date_format(`created_on`, ''%d.%m.%Y %H:%i'') `started`, `text` FROM `request_posts` WHERE `requestid` = ''#requestid#'' AND `author_type` = 0 AND `spec` = 0 ORDER BY id DESC LIMIT 1">\n({started}):\n<p>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("<pre>") : '''';  ]}\n{text}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("</pre>") : '''';  ]}\n</p>\n</tpl>\n</div>\n\n<tpl sql="SELECT date_format(`created_on`, ''%d.%m.%Y %H:%i'') `created`, `text` FROM `request_posts` WHERE `requestid` = ''#requestid#'' AND `spec` = 0 AND `author_type` = ''#authortype#'' ORDER BY `id` DESC LIMIT 1">\n<div>\n<hr>\nПоследнее сообщение от клиента ({created}):\n<div>\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("<pre>") : '''';  ]}\n{text}\n{[ !preg_match(''/\\<\\w.*\\>/'', $params[''text'']) ? print("</pre>") : '''';  ]}\n</div>\n</div>\n</tpl>\n</body>\n</html>');

-- --------------------------------------------------------

--
-- Структура таблицы `options`
--

CREATE TABLE IF NOT EXISTS `options` (
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT 'Имя опции',
  `descr` varchar(150) NOT NULL DEFAULT '' COMMENT 'Описание опции',
  `value` varchar(1500) DEFAULT NULL COMMENT 'Значение опции'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Глобальные опции системы';

--
-- Дамп данных таблицы `options`
--

INSERT INTO `options` (`name`, `descr`, `value`) VALUES
('admin_url', 'URL к административному кабинету (полная или относительная)', 'sbss/admin/'),
('asterisk_channel_context', 'Контекст канала', 'sbss-route'),
('asterisk_extention_context', 'Контекст экстеншена', 'sbss-call'),
('asterisk_password', 'Пароль для входа в AMI', ''),
('asterisk_port', 'Порт сервера Asterisk', '5038'),
('asterisk_server', 'Адрес сервера Asterisk', '127.0.0.1'),
('asterisk_username', 'Логин для входа в AMI', ''),
('client_documents_path', 'Путь для хранения приклепленных к пользователю документов', '.'),
('client_login_length', 'Минимальная длина логина клиента', '3'),
('client_pass_length', 'Минимальная длина пароля клиента', '8'),
('client_url', 'URL к клиентскому кабинету (полная или относительная)', 'sbss/client/'),
('default_lang', 'Язык интерфейса по умолчанию', 'ru'),
('license_max_failure', 'Максимальное число попыток активации (до блокировки IP адреса)', '20'),
('license_port', 'TCP порт сервера активации', '34100'),
('license_private_key', 'Закрытый ключ для подписи лицензии', ''),
('license_tls_cert', 'TLS сертификат сервера активации', ''),
('log_details', 'Детализировать журнал', '0'),
('mailer_debug', 'Включить отладку', '0'),
('mailer_get_box', 'Имя почтового ящика', 'user@localhost'),
('mailer_get_host', 'Имя сервера', '127.0.0.1'),
('mailer_get_pass', 'Пароль', ''),
('mailer_get_port', 'Порт сервера', '110'),
('mailer_get_proto', 'Протокол получения почты', 'POP3'),
('mailer_get_tls', 'Использовать TLS', '0'),
('mailer_get_user', 'Пользователь', 'user@localhost'),
('mailer_imap_folder', 'Папка хранения входящих сообщений на IMAP сервере', 'INBOX'),
('mailer_mail_storage', 'Путь для хранения приклепленных к пользователю почтовых сообщений', '.'),
('mailer_message_size', 'Максимальный размер сообщения (Байт)', '10485760'),
('mailer_recheck', 'Проверять почту регулярно через', '60'),
('mailer_smtp_auth', 'Метод SMPT авторизации', '0'),
('mailer_smtp_host', 'Имя сервера', '127.0.0.1'),
('mailer_smtp_pass', 'Пароль', ''),
('mailer_smtp_port', 'Порт сервера', '25'),
('mailer_smtp_tls', 'Использовать TLS', '0'),
('mailer_smtp_user', 'Пользователь', 'user@localhost'),
('offer_file_path', 'Путь к файлу шаблона коммерческого предложения', ''),
('passive_auth_ttl_admin', 'Максимальное время жизни сессии, при бездействии менеджера (секунды)', '86400'),
('passive_auth_ttl_client', 'Максимальное время жизни сессии, при бездействии клиента (секунды)', '86400'),
('phone_regexp', 'Формат телефонного номера (регулярное выражение)', ''),
('redmine_enabled', 'Включить плагин Redmine', '0'),
('redmine_port', 'Порт Redmine', ''),
('redmine_url', 'Url-адрес Redmine', ''),
('request_files_path', 'Путь для хранения приклепленных к сообщениям файлов', '.'),
('responsible_requests_default', 'Менеджера ответственного в запросах по умолчанию', '1'),
('version', 'Версия ПО', '0.8');

-- --------------------------------------------------------

--
-- Структура таблицы `php_sessions`
--

CREATE TABLE IF NOT EXISTS `php_sessions` (
  `id` char(32) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'Идентификатор сессии создается на уровне php',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `expires` int(11) NOT NULL COMMENT 'Время жизни сессии',
  `data` text NOT NULL COMMENT 'Данные сессии'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Таблица для хранения сессий PHP интерфейса';

-- --------------------------------------------------------

--
-- Структура таблицы `platforms`
--

CREATE TABLE IF NOT EXISTS `platforms` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор платформы',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название платформы',
  `code` varchar(32) DEFAULT NULL COMMENT 'Внешний код платформы',
  `fixedcost` double DEFAULT NULL COMMENT 'Фиксированная стоимость платформы',
  `versionid` int(10) DEFAULT NULL COMMENT 'Версия платформы',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - платформа удалена',
  `price_groupid` int(3) DEFAULT NULL COMMENT 'Включить платформу в прайсовую группу'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Доступные платформы';

--
-- Дамп данных таблицы `platforms`
--

INSERT INTO `platforms` (`id`, `name`, `code`, `fixedcost`, `versionid`, `archive`, `price_groupid`) VALUES
(1, 'Платформа по умолчанию', '000001', 0, 1, 0, NULL);

--
-- Триггеры `platforms`
--
DELIMITER $$
CREATE TRIGGER `client_added_platforms` AFTER INSERT ON `platforms`
 FOR EACH ROW BEGIN
	
	DECLARE l_name varchar(30);
    DECLARE l_groupid int;
    DECLARE done boolean default FALSE;
    
    DECLARE fields_list CURSOR FOR SELECT `name`, `groupid` FROM `fields` WHERE `getvaluesfrom`=2;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN fields_list;
    FETCH fields_list INTO l_name, l_groupid;
    WHILE NOT done DO
    	INSERT INTO `fields_staff` SET `name` = l_name, `groupid`=l_groupid, `value`=NEW.`name`, `tag`=NEW.`versionid`;
        SET done = FALSE;
        FETCH fields_list INTO l_name, l_groupid;
    END WHILE;
	
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `platforms_after_update` BEFORE UPDATE ON `platforms`
 FOR EACH ROW BEGIN
	IF NEW.`archive` > 0 AND OLD.`archive` <> NEW.`archive` THEN
		UPDATE `platform_cost` SET `archive` = 1 WHERE `archive` <> 1 AND `platformid` = NEW.`id`;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `platform_cost`
--

CREATE TABLE IF NOT EXISTS `platform_cost` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `optionid` int(10) DEFAULT NULL COMMENT 'Идентификатор опции',
  `platformid` int(10) DEFAULT NULL COMMENT 'Идентификатор платформы',
  `amountmin` double NOT NULL DEFAULT '0' COMMENT 'Минимальное количество указаного значения опции при которой срабатывает стоимость',
  `amountmax` double NOT NULL DEFAULT '0' COMMENT 'Максимальное количество указаного значения опции при которой срабатывает стоимость',
  `round_amount` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Округлять значение при расчете стоимости, - нет, 1 - меньшую, 2 - большую',
  `cost` double NOT NULL DEFAULT '0' COMMENT 'Стоимость платформы для текущего условия',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Архивация стоимости'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Стоимость платформы на основании опций';

-- --------------------------------------------------------

--
-- Структура таблицы `price_groups`
--

CREATE TABLE IF NOT EXISTS `price_groups` (
  `id` int(3) NOT NULL COMMENT 'Иденитификатор записи',
  `weight` tinyint(2) DEFAULT '0' COMMENT 'Очередь в отображении груп, весовая величина (для внешних плагинов)',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Название позиции'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Группировка позиций прайс-листа';

-- --------------------------------------------------------

--
-- Структура таблицы `price_list`
--

CREATE TABLE IF NOT EXISTS `price_list` (
  `id` int(5) NOT NULL COMMENT 'Иденитификатор записи',
  `groupid` int(3) DEFAULT NULL COMMENT 'Связь с группой',
  `versionid` int(10) DEFAULT NULL COMMENT 'Связь с версией',
  `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Название позиции',
  `code` varchar(32) DEFAULT NULL COMMENT 'Внешний код (Артикул)',
  `fixedcost` double DEFAULT NULL COMMENT 'Фиксированная стоимость',
  `active` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - Позиция отключена',
  `descr` text COMMENT 'Описание позиции'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Дополнительные не связанные с опциями позиции прайс листа';

-- --------------------------------------------------------

--
-- Структура таблицы `price_list_versions`
--

CREATE TABLE IF NOT EXISTS `price_list_versions` (
  `priceid` int(5) NOT NULL DEFAULT '0' COMMENT 'Связь с позицией в прайс листе',
  `versionid` int(10) NOT NULL DEFAULT '0' COMMENT 'Связь с версией'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Связь позиции прайс листа с версией';

-- --------------------------------------------------------

--
-- Структура таблицы `price_post_rules`
--

CREATE TABLE IF NOT EXISTS `price_post_rules` (
  `id` int(3) NOT NULL COMMENT 'Идентификатор записи',
  `versionid` int(10) DEFAULT NULL COMMENT 'Связь с версией',
  `active` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Правило активно',
  `name` varchar(100) NOT NULL DEFAULT '' COMMENT 'Описание правила',
  `logic` text COMMENT 'PHP код для этого правила. Преобразуется в lambda функцию'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Правила для пост обработки основного прайс листа';

-- --------------------------------------------------------

--
-- Структура таблицы `price_regions`
--

CREATE TABLE IF NOT EXISTS `price_regions` (
  `id` int(5) NOT NULL COMMENT 'Идентификатор региона',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT 'Название',
  `curid` int(10) DEFAULT NULL COMMENT 'Идентификатор валюты',
  `margin_statement` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Операция наценки: 0 - вычит, 1 - прибавл, 2 - делн, 3 - умн',
  `margin` double NOT NULL DEFAULT '0' COMMENT 'Величина наценки',
  `margin_type` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Тип наценки: 0 - фиксировано, 1 - процент'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Наценки и скидки для выделенных регионов';

-- --------------------------------------------------------

--
-- Структура таблицы `profiles_license`
--

CREATE TABLE IF NOT EXISTS `profiles_license` (
  `id` int(5) NOT NULL COMMENT 'Идентификатор профиля',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT 'Название',
  `versionid` int(10) DEFAULT NULL COMMENT 'Связь с версией',
  `clientallow` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Разрешить клиенту воспользоваться профилем'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Профили лицензий';

-- --------------------------------------------------------

--
-- Структура таблицы `profiles_license_client_classes`
--

CREATE TABLE IF NOT EXISTS `profiles_license_client_classes` (
  `liprofid` int(4) NOT NULL COMMENT 'Номер профиля',
  `classid` int(5) NOT NULL COMMENT 'Идентификатор класса'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Для каких классов клиентов доступен профиль';

-- --------------------------------------------------------

--
-- Структура таблицы `profiles_license_client_used`
--

CREATE TABLE IF NOT EXISTS `profiles_license_client_used` (
  `liprofid` int(4) NOT NULL COMMENT 'Номер профиля',
  `clientid` int(10) NOT NULL COMMENT 'Идентификатор клиента',
  `activated_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата активации профиля'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Профили лицензий которыми воспользовался клиент';

-- --------------------------------------------------------

--
-- Структура таблицы `profiles_license_options`
--

CREATE TABLE IF NOT EXISTS `profiles_license_options` (
  `liprofid` int(4) NOT NULL COMMENT 'Номер профиля',
  `loid` int(10) NOT NULL COMMENT 'Идентификатор платформы',
  `value` varchar(150) DEFAULT NULL COMMENT 'Значение опции в ключе'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Состав лицензионного профиля, опции';

-- --------------------------------------------------------

--
-- Структура таблицы `profiles_license_platforms`
--

CREATE TABLE IF NOT EXISTS `profiles_license_platforms` (
  `liprofid` int(4) NOT NULL COMMENT 'Номер профиля',
  `platformid` int(10) NOT NULL COMMENT 'Идентификатор платформы'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Состав лицензионного профиля, платформы';

-- --------------------------------------------------------

--
-- Структура таблицы `reports`
--

CREATE TABLE IF NOT EXISTS `reports` (
  `id` int(5) NOT NULL COMMENT 'Идентификатор записи',
  `authorid` int(10) NOT NULL COMMENT 'Менеджер создавший отчет, владелец',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название отчета',
  `hide` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Скрыть отчет в списках',
  `history` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Сохранять данные отчета после каждой генерации',
  `filter` varchar(255) NOT NULL DEFAULT '' COMMENT 'Показать в форме формирования отчета фильтры',
  `report` text COMMENT 'Шаблон отчета',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - отчет удален',
  `mode` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Формат выгрузки отчета, 0 - в окне браузера, 1 - word, 2 - excel'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Отчеты';

-- --------------------------------------------------------

--
-- Структура таблицы `report_form`
--

CREATE TABLE IF NOT EXISTS `report_form` (
  `reportid` int(5) NOT NULL COMMENT 'Идентификатор отчета',
  `form_name` varchar(32) NOT NULL DEFAULT '' COMMENT 'Сиволическое название формы в которой этот отчет доступен'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Форма в которую слудует добавить отчет';

-- --------------------------------------------------------

--
-- Структура таблицы `report_history`
--

CREATE TABLE IF NOT EXISTS `report_history` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `reportid` int(5) NOT NULL COMMENT 'Идентификатор отчета',
  `authorid` int(10) DEFAULT NULL COMMENT 'Идентификатор менеджера создавшего отчет',
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `data` longblob COMMENT 'Данные отчета'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='История формирования отчетов';

-- --------------------------------------------------------

--
-- Структура таблицы `report_role`
--

CREATE TABLE IF NOT EXISTS `report_role` (
  `roleid` int(5) NOT NULL COMMENT 'Роль для которой отчет разрешен',
  `reportid` int(5) NOT NULL COMMENT 'Идентификатор отчета'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Роли для которых отчет доступен';

-- --------------------------------------------------------

--
-- Структура таблицы `requests`
--

CREATE TABLE IF NOT EXISTS `requests` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `name` varchar(150) DEFAULT '' COMMENT 'Заголовок запроса',
  `author_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - менеджер, 1 - клиент',
  `author_id` int(10) DEFAULT NULL COMMENT 'Идентификатор автора, зависит, зависит от author_type',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания запроса',
  `respondent_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Ответил: 0 - менеджер, 1 - клиент',
  `respondent_id` int(10) DEFAULT NULL COMMENT 'Идентификатор автора последнего сообщения, зависит от respondent_type',
  `lastpost` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Дата и время последнего сообщения',
  `responsible_man` int(10) DEFAULT NULL COMMENT 'Ответственный менеджер',
  `classid` int(5) DEFAULT NULL COMMENT 'Текущий класс запроса',
  `replies` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Количество ответов со стороны менеджера',
  `cfiles` int(4) unsigned NOT NULL DEFAULT '0' COMMENT 'Количество прикрепленных файлов к запросу, устанавливается триггером',
  `statusid` int(4) DEFAULT NULL COMMENT 'Текущий статус',
  `manager_lock` int(10) DEFAULT NULL COMMENT 'Заблокировно менеджером для ответа. Блокирует доступ только для менеджеров',
  `priority` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Приоритет запроса выставляемый менеджером для поднятия в списке',
  `deadline` date DEFAULT '0000-00-00' COMMENT 'Крайний срок выполнения договоренностей по запросу',
  `additional_email` varchar(150) DEFAULT '' COMMENT 'Дополнительный email для пересылки сообщений по запросу',
  `rating` int(5) DEFAULT '0' COMMENT 'Рейтинг - качество решения задачи',
  `penaltyid` int(10) DEFAULT NULL COMMENT 'Привязка к записи о штрафе'
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='Темы запросов';

--
-- Дамп данных таблицы `requests`
--

INSERT INTO `requests` (`id`, `name`, `author_type`, `author_id`, `created_on`, `respondent_type`, `respondent_id`, `lastpost`, `responsible_man`, `classid`, `replies`, `cfiles`, `statusid`, `manager_lock`, `priority`, `deadline`, `additional_email`, `rating`, `penaltyid`) VALUES
(3, 'Тестовый запрос', 1, 1, '2012-12-13 09:22:22', 1, 1, '2012-12-13 17:23:52', 1, 1, 1, 0, 4, NULL, 0, '0000-00-00', '', 0, NULL);

--
-- Триггеры `requests`
--
DELIMITER $$
CREATE TRIGGER `request_before_update` BEFORE UPDATE ON `requests`
 FOR EACH ROW BEGIN
    IF @SBSS_DISABLE_TRIGGERS IS NULL OR @SBSS_DISABLE_TRIGGERS = 0 THEN
        BEGIN
            DECLARE _time tinyint(3) DEFAULT 0;
            DECLARE _time_old tinyint(3) DEFAULT 0;
            DECLARE _spid int(5) DEFAULT 0;
            DECLARE _penalty double DEFAULT 0;
            DECLARE _penalty_old double DEFAULT 0;
            DECLARE _new_penalty boolean DEFAULT FALSE;
            DECLARE _stopdate date;
            
            IF OLD.`statusid` != NEW.`statusid` OR
               OLD.`priority` != NEW.`priority` OR
               OLD.`classid` != NEW.`classid` THEN
               
               SET _spid = GET_TIME_PENALTY(NEW.`id`, 'SPID', NEW.`statusid`);
               SET _time = @ESCALATION_INFO_TIME;
               SET _penalty = @ESCALATION_INFO_PENALTY;
               
               IF OLD.`penaltyid` > 0 THEN
                   SELECT `penalty`, `time` INTO _penalty_old, _time_old 
                   FROM `request_penalty_history` WHERE `id` = OLD.`penaltyid`;
                   
                   IF _penalty_old != _penalty OR 
                      _time_old != _time THEN
                      
                      SET _stopdate = NULL;
                      
                      IF _spid = 0 THEN
                          SELECT DISTINCT `stopdate` INTO _stopdate
                            FROM `client_service_packs` `csp`
                            JOIN `request_penalty_history` `rph` ON (`rph`.`id` = OLD.`penaltyid`) 
                          WHERE `csp`.`clientid` = OLD.`author_id` AND `csp`.`serviceid` = `rph`.`spid` LIMIT 1;
                      END IF;
                      
                      UPDATE `request_penalty_history` SET 
                          `closed_on` = IF(_stopdate IS NOT NULL AND _stopdate < DATE(NOW()), _stopdate, NOW()) 
                      WHERE `id` = OLD.`penaltyid`;
                      
                      IF _spid > 0 THEN
                          SET _new_penalty = TRUE;
                      ELSE
                          SET NEW.`penaltyid` = NULL;
                      END IF;
                   END IF;
               ELSE
                   IF _spid > 0 THEN
                       SET _new_penalty = TRUE;
                   END IF;
               END IF;
               
               IF _new_penalty THEN
                   INSERT INTO `request_penalty_history` (`requestid`, `spid`, `time`, `penalty`)
                       VALUES (NEW.`id`, _spid, _time, _penalty);
                           
                   SET NEW.`penaltyid` = LAST_INSERT_ID();
               END IF;
            END IF;
        END;
    END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `requests_seen`
--

CREATE TABLE IF NOT EXISTS `requests_seen` (
  `requestid` int(10) NOT NULL DEFAULT '0' COMMENT 'Идентификатор запроса',
  `managerid` int(5) NOT NULL DEFAULT '0' COMMENT 'Идентификатор менеджера'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Просмотр запроса менеджером';

-- --------------------------------------------------------

--
-- Структура таблицы `request_classes`
--

CREATE TABLE IF NOT EXISTS `request_classes` (
  `id` int(4) NOT NULL COMMENT 'Идентификатор записи в таблице',
  `descr` varchar(150) DEFAULT NULL COMMENT 'Описание / Название статуса',
  `responsibleid` int(10) DEFAULT NULL COMMENT 'Отвественный по умолчанию для указаного класса',
  `color` char(6) NOT NULL DEFAULT 'FF0000' COMMENT 'Цветовое оформление запроса с указаным классом',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - класс удален'
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='Классы запросов';

--
-- Дамп данных таблицы `request_classes`
--

INSERT INTO `request_classes` (`id`, `descr`, `responsibleid`, `color`, `archive`) VALUES
(1, 'Общий вопрос функционирования', 1, 'FF6600', 0),
(2, 'Обещаный платеж', 1, 'ff0000', 0),
(3, 'Финансовые вопросы', 1, 'ff0000', 0),
(4, 'Вопросы по тарифам', 1, 'ff0000', 0),
(5, 'Работа ТВ', 1, 'ff0000', 0),
(6, 'Работа интернет', 1, 'ff0000', 0),
(7, 'Вопросы по биллингу', 1, 'ff0000', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `request_class_escalation`
--

CREATE TABLE IF NOT EXISTS `request_class_escalation` (
  `id` int(4) NOT NULL COMMENT 'Идентификатор записи в таблице',
  `spid` int(5) NOT NULL COMMENT 'Идентификатор сервисного пакета',
  `rcid` int(4) NOT NULL COMMENT 'Идентификатор класса запроса',
  `time_percent` tinyint(3) unsigned NOT NULL COMMENT 'Процент прошедшего времени',
  `email` varchar(150) NOT NULL DEFAULT '' COMMENT 'Адреса для отправки уведомления'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Настройка эскалации для класса запроса в рамкам сервисного п';

-- --------------------------------------------------------

--
-- Структура таблицы `request_class_penalty`
--

CREATE TABLE IF NOT EXISTS `request_class_penalty` (
  `spid` int(5) NOT NULL COMMENT 'Идентификатор сервисного пакета',
  `rcid` int(4) NOT NULL COMMENT 'Идентификатор класса запроса',
  `priority` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Значение приоритета: 3,2,1',
  `time` tinyint(3) NOT NULL DEFAULT '0' COMMENT 'Время в часах для решения запроса',
  `quant_time` tinyint(3) NOT NULL DEFAULT '1' COMMENT 'Стоимость часа задержки решения',
  `penalty` double NOT NULL DEFAULT '0' COMMENT 'Штраф за час просрочки'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Штраф и время реакции для класса запроса в рамках сервисного';

-- --------------------------------------------------------

--
-- Структура таблицы `request_fields_vals`
--

CREATE TABLE IF NOT EXISTS `request_fields_vals` (
  `idx` int(3) DEFAULT NULL COMMENT 'Идентификатор значения в рамках поля',
  `requestid` int(10) NOT NULL COMMENT 'Идентификатор запроса',
  `groupid` int(10) DEFAULT NULL COMMENT 'Идентификатор группы, не обязательно',
  `name` varchar(32) NOT NULL COMMENT 'Уникальное имя дополнительного поля',
  `idxvalue` int(10) DEFAULT NULL COMMENT 'Идентификатор значения, если поле - список значение',
  `strvalue` varchar(255) NOT NULL COMMENT 'Значение текстового поля'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Значения дополнительных полей в рамках запроса';

--
-- Триггеры `request_fields_vals`
--
DELIMITER $$
CREATE TRIGGER `request_fields_delete_used` AFTER DELETE ON `request_fields_vals`
 FOR EACH ROW BEGIN
	SELECT 1 INTO @FIELDUSED FROM `request_fields_vals` WHERE `name` = OLD.`name` LIMIT 1;
	IF @FIELDUSED IS NULL THEN
		UPDATE `fields` SET `used` = 0 WHERE `name` = OLD.`name`;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `request_fields_insert_used` AFTER INSERT ON `request_fields_vals`
 FOR EACH ROW BEGIN
	UPDATE `fields` SET `used` = 1 WHERE `name` = NEW.`name`;
	UPDATE `fields_groups` SET `used` = 1 WHERE `id` = NEW.`groupid`;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `request_fvals_increment` BEFORE INSERT ON `request_fields_vals`
 FOR EACH ROW BEGIN
	SELECT `type`, `groupid` INTO @FIELD_TYPE, @FIELD_GROUP FROM `fields` WHERE `name` = NEW.`name` AND `form` = 1;
	IF NEW.`groupid` IS NULL THEN
		SET NEW.`groupid` = @FIELD_GROUP;
	END IF;
	IF NEW.`idxvalue` = 0 OR @FIELD_TYPE IS NULL OR @FIELD_TYPE = 0 THEN
		SET NEW.`idxvalue` = NULL;
	END IF;
	IF @FIELD_TYPE = 1 THEN
		SET NEW.`strvalue` = '';
	END IF;
	SET @LAST_IDX = 0;
	IF NEW.`idx` IS NULL THEN
		SELECT `idx` INTO @LAST_IDX FROM `request_fields_vals` WHERE `name` = NEW.`name` AND `requestid` = NEW.`requestid` ORDER BY `idx` DESC LIMIT 1;
		IF @LAST_IDX IS NULL THEN
			SET NEW.`idx` = 1;
		ELSE
			SET NEW.`idx` = @LAST_IDX + 1;
		END IF;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `request_issues`
--

CREATE TABLE IF NOT EXISTS `request_issues` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `requestid` int(10) DEFAULT NULL COMMENT 'Идентификатор запроса',
  `postid` int(10) DEFAULT NULL COMMENT 'Идентификатор сообщения'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Созданные в запросе задачи Redmine';

-- --------------------------------------------------------

--
-- Структура таблицы `request_penalty_history`
--

CREATE TABLE IF NOT EXISTS `request_penalty_history` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи в таблице',
  `requestid` int(10) NOT NULL COMMENT 'Связь с запросом',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания записи',
  `closed_on` datetime DEFAULT NULL COMMENT 'Дата и время прекращения штрафа',
  `spid` int(5) NOT NULL COMMENT 'Идентификатор сервисного пакета',
  `time` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Расчетное время реакции',
  `quant` tinyint(3) NOT NULL DEFAULT '0' COMMENT 'Стоимость часа задержки решения',
  `free_time` bigint(20) NOT NULL DEFAULT '0' COMMENT 'Время в минутах оставшееся до начала штрафа',
  `quant_time` tinyint(3) NOT NULL DEFAULT '0' COMMENT 'Стоимость часа задержки решения',
  `time_elapsed` bigint(20) NOT NULL DEFAULT '0' COMMENT 'Просроченное время в минутах',
  `penalty` double NOT NULL DEFAULT '0' COMMENT 'Штраф просрочки',
  `penalty_value` double NOT NULL DEFAULT '0' COMMENT 'Расчитаный штраф'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='История начисления штрафов';

-- --------------------------------------------------------

--
-- Структура таблицы `request_posts`
--

CREATE TABLE IF NOT EXISTS `request_posts` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `requestid` int(10) DEFAULT NULL COMMENT 'Идентификатор запроса',
  `statusid` int(4) DEFAULT NULL COMMENT 'Текущий статус при котором оставлено сообщение',
  `author_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - менеджер, 1 - клиент',
  `author_id` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'Идентификатор автора, зависит от author_type',
  `responsible_man` int(10) DEFAULT NULL COMMENT 'Текущий отвествтенный по тикету',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания сообщения',
  `text` text NOT NULL COMMENT 'Текст сообщения',
  `spec` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0 - Общедоступное, 1 - Техническое, 2 - Служебное, 3 - Задача Redmine'
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COMMENT='Сообщения запросов';

--
-- Дамп данных таблицы `request_posts`
--

INSERT INTO `request_posts` (`id`, `requestid`, `statusid`, `author_type`, `author_id`, `responsible_man`, `created_on`, `text`, `spec`) VALUES
(12, 3, 1, 1, 1, 1, '2012-12-13 09:22:22', 'Добрый день! (описание проблемы, с которой столкнулся клиент)', 0),
(13, 3, 3, 0, 1, 1, '2012-12-13 09:23:00', 'Статус Новый изменен на Ожидание', 1),
(14, 3, 3, 0, 1, 1, '2012-12-13 09:23:00', 'Здравствуйте! Ваша проблема решена', 0),
(15, 3, 2, 1, 1, 1, '2012-12-13 09:23:31', 'Статус Ожидание изменен на Требует реакции', 1),
(16, 3, 2, 1, 1, 1, '2012-12-13 09:23:31', 'Спасибо, всё работает! Можно закрывать', 0),
(17, 3, 4, 0, 1, 1, '2012-12-13 09:23:52', 'Статус Требует реакции изменен на Завершен', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `request_post_files`
--

CREATE TABLE IF NOT EXISTS `request_post_files` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор записи',
  `postid` int(10) DEFAULT NULL COMMENT 'Идентификатор сообщения',
  `requestid` int(10) DEFAULT NULL COMMENT 'Идентификатор запроса',
  `filesize` int(11) NOT NULL DEFAULT '0' COMMENT 'Размер файла в байтах',
  `filename` varchar(150) NOT NULL DEFAULT '' COMMENT 'Оригинальное имя файла',
  `document_name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название документа',
  `author_type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '0 - менеджер, 1 - клиент',
  `author_id` int(10) DEFAULT NULL COMMENT 'Идентификатор автора, зависит от поля author_type',
  `created_on` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата и время создания записи'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Файлы в сообщениях';

--
-- Триггеры `request_post_files`
--
DELIMITER $$
CREATE TRIGGER `request_post_files_delete` AFTER DELETE ON `request_post_files`
 FOR EACH ROW BEGIN
	IF @SBSS_DISABLE_TRIGGERS IS NULL OR @SBSS_DISABLE_TRIGGERS = 0 THEN
		UPDATE `requests` SET `cfiles` = IF(`cfiles` > 0, `cfiles` - 1, 0) WHERE `id` = OLD.`requestid`;
	END IF;
END
$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER `request_post_files_insert` AFTER INSERT ON `request_post_files`
 FOR EACH ROW BEGIN
	IF @SBSS_DISABLE_TRIGGERS IS NULL OR @SBSS_DISABLE_TRIGGERS = 0 THEN
		UPDATE `requests` SET `cfiles` = `cfiles` + 1 WHERE `id` = NEW.`requestid`;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `request_statuses`
--

CREATE TABLE IF NOT EXISTS `request_statuses` (
  `id` int(4) NOT NULL COMMENT 'Идентификатор записи статуса',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Доступен: 0 - Всем, 1 - Менеджерам только, 2 - Пользователям только',
  `descr` varchar(150) NOT NULL DEFAULT '' COMMENT 'Описание',
  `color` varchar(6) NOT NULL DEFAULT '000000' COMMENT 'Цвет статуса (hex)',
  `active` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Статус доступен в списках для назначения, 0 - отключен',
  `list_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Отображать записи с этим статусом по умолчанию в списках',
  `modify_allow` tinyint(1) DEFAULT '0' COMMENT 'Разрешить клиенту добавлять сообщения в тикет',
  `new_default` tinyint(1) DEFAULT NULL COMMENT 'Назначить этот статус по умолчаню при создании нового сообщения',
  `answer_default` tinyint(1) DEFAULT NULL COMMENT 'Статус по умолчанию при ответе клиентом на сообщение',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - статус удален'
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='Статусы сообщений';

--
-- Дамп данных таблицы `request_statuses`
--

INSERT INTO `request_statuses` (`id`, `type`, `descr`, `color`, `active`, `list_default`, `modify_allow`, `new_default`, `answer_default`, `archive`) VALUES
(1, 0, 'Новый', 'FF0000', 1, 1, 1, 1, NULL, 0),
(2, 0, 'Требует реакции', 'FF9900', 1, 1, 1, NULL, 1, 0),
(3, 0, 'Ожидание', '008000', 1, 1, 1, NULL, NULL, 0),
(4, 0, 'Завершен', '000000', 1, 1, 0, NULL, NULL, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `roles`
--

CREATE TABLE IF NOT EXISTS `roles` (
  `id` int(5) NOT NULL COMMENT 'Порядковый номер записи в таблице',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название роли'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Роли';

--
-- Дамп данных таблицы `roles`
--

INSERT INTO `roles` (`id`, `name`) VALUES
(1, 'Супер пользователь');

-- --------------------------------------------------------

--
-- Структура таблицы `role_objects`
--

CREATE TABLE IF NOT EXISTS `role_objects` (
  `roleid` int(5) NOT NULL COMMENT 'Номер роли',
  `descr` varchar(150) NOT NULL DEFAULT '' COMMENT 'Описание объекта',
  `object` varchar(150) NOT NULL DEFAULT '' COMMENT 'Объект, иерархия разделяется точкой. Родительский элемент - раздел интерфейса',
  `permission` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Разрешение для объекта'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Роли';

--
-- Дамп данных таблицы `role_objects`
--

INSERT INTO `role_objects` (`roleid`, `descr`, `object`, `permission`) VALUES
(1, 'Calls monitor', 'callsmonitor', 2),
(1, 'Duties', 'callsmonitor.duty', 2),
(1, 'Personal duties', 'callsmonitor.duty.personal', 2),
(1, 'Changelog', 'changelog', 2),
(1, 'Clients', 'clients', 2),
(1, 'Simple access to the client side', 'clients.clientside', 2),
(1, 'Documents', 'clients.documents', 2),
(1, 'Mail', 'clients.mail', 2),
(1, 'Documents register', 'documents', 2),
(1, 'Files', 'files', 2),
(1, 'Messages', 'infoposts', 2),
(1, 'Knowledges', 'knowledges', 2),
(1, 'License options', 'licenseoptions', 2),
(1, 'Log', 'logs', 2),
(1, 'Mailing', 'mailing', 2),
(1, 'Send mail', 'mailing.sendmail', 2),
(1, 'Managers', 'managers', 2),
(1, 'Call-manager plugin', 'managers.calls', 2),
(1, 'Modules', 'modules', 2),
(1, 'Notifications', 'notice', 2),
(1, 'Options', 'options', 2),
(1, 'Client classes', 'options.clientclasses', 2),
(1, 'Currency', 'options.currency', 2),
(1, 'Configuration fields', 'options.fields', 2),
(1, 'Global', 'options.global', 2),
(1, 'Mailing groups', 'options.mailinggroups', 2),
(1, 'Price list', 'options.price', 2),
(1, 'Profiles license', 'options.profileslicense', 2),
(1, 'Request classes', 'options.requestclasses', 2),
(1, 'Scheduler', 'options.scheduler', 2),
(1, 'Services packages', 'options.servicepacks', 2),
(1, 'Statuses', 'options.statuses', 2),
(1, 'Platforms', 'platforms', 2),
(1, 'Reports', 'reports', 2),
(1, 'Requests', 'requests', 2),
(1, 'Versions', 'versions', 2);

--
-- Триггеры `role_objects`
--
DELIMITER $$
CREATE TRIGGER `on_role_permision_insert` BEFORE INSERT ON `role_objects`
 FOR EACH ROW BEGIN
	IF NEW.`roleid` > 1 AND NEW.`object` IS NOT NULL THEN 
		 SELECT `descr` INTO @ROLEOBJNAME FROM `role_objects` WHERE `roleid` = 1 AND `object` = NEW.`object`;
		 IF @ROLEOBJNAME IS NOT NULL THEN
		 	SET NEW.`descr` = @ROLEOBJNAME;
		 END IF;
	END IF;
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Структура таблицы `sbss_tasks`
--

CREATE TABLE IF NOT EXISTS `sbss_tasks` (
  `id` int(11) NOT NULL COMMENT 'Идентификатор задачи',
  `name` varchar(64) NOT NULL DEFAULT '' COMMENT 'Имя задачи',
  `script` varchar(64) NOT NULL DEFAULT '' COMMENT 'Относительный путь к скрипту',
  `year` smallint(5) unsigned NOT NULL DEFAULT '0' COMMENT 'Год',
  `month` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Месяц',
  `day` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'День',
  `week` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Дни недели (битовое поле: 0, сб, пт, чт, ср, вт, пн, вс)',
  `hours` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Часы',
  `minutes` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Минуты',
  `seconds` tinyint(3) unsigned NOT NULL DEFAULT '0' COMMENT 'Секунды',
  `fixed_month` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Месяц фиксир./периодич.',
  `fixed_day` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'День фиксир./периодич.',
  `fixed_hours` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Часы фиксир./периодич.',
  `fixed_minutes` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Минуты фиксир./периодич.',
  `fixed_seconds` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Секунды фиксир./периодич.',
  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Время модификации записи',
  `last_started` datetime DEFAULT NULL COMMENT 'Время последнего запуска',
  `enabled` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'Активность задачи'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Задачи планировщика SBSS';

-- --------------------------------------------------------

--
-- Структура таблицы `service_packs`
--

CREATE TABLE IF NOT EXISTS `service_packs` (
  `id` int(5) NOT NULL COMMENT 'Порядковый номер записи в таблице',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Краткое название пакета',
  `descr` varchar(255) NOT NULL DEFAULT '' COMMENT 'Полное описание сервисного пакета',
  `code` varchar(32) DEFAULT NULL COMMENT 'Внешний код сервисного пакета',
  `cssname` varchar(32) NOT NULL COMMENT 'CSS который применить для оформления сервисного пакета в списках',
  `reaction_time` int(4) NOT NULL DEFAULT '0' COMMENT 'Время реакции службы технической поддержки от последнего сообщения клиента (в часах)',
  `software` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Разрешить скачивать любые пакеты',
  `ttmsposts` int(5) NOT NULL DEFAULT '0' COMMENT 'Контролировать сообщения  и запретить писать по истечению срока действия пакета',
  `ttmspostslimit` int(5) NOT NULL DEFAULT '0' COMMENT 'Ограничить количество сообщений',
  `notify_r_responsible` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Уведомлять ответственного в запросе об истечении срока',
  `notify_rс_responsible` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Уведомлять ответственного в класее запроса об истечении срока',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Флаг об удалении пакета'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Сервисные пакеты';

--
-- Дамп данных таблицы `service_packs`
--

INSERT INTO `service_packs` (`id`, `name`, `descr`, `code`, `cssname`, `reaction_time`, `software`, `ttmsposts`, `ttmspostslimit`, `notify_r_responsible`, `notify_rс_responsible`, `archive`) VALUES
(1, 'Техническая поддержка', 'Техническая поддержка', 'ServicePack001', 'ServicePack001', 24, 1, 1, 100, 0, 0, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `service_pack_statuses`
--

CREATE TABLE IF NOT EXISTS `service_pack_statuses` (
  `spid` int(5) NOT NULL COMMENT 'Идентификатор сервисного пакета',
  `statusid` int(4) NOT NULL COMMENT 'Идентификатор '
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Перечень статусов определющие страбатывание расчета времени';

-- --------------------------------------------------------

--
-- Структура таблицы `software_download_history`
--

CREATE TABLE IF NOT EXISTS `software_download_history` (
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Дата создания записи',
  `clientid` int(10) DEFAULT NULL COMMENT 'Идентификатор клиента',
  `platformid` int(10) DEFAULT NULL COMMENT 'Идентификатор платформы',
  `filename` varchar(64) NOT NULL DEFAULT '' COMMENT 'Имя загружаемого файла'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='История загрузок ПО клиентом';

-- --------------------------------------------------------

--
-- Структура таблицы `software_files`
--

CREATE TABLE IF NOT EXISTS `software_files` (
  `versionid` int(10) DEFAULT NULL COMMENT 'Версия которогой принадлежат файлы',
  `platformid` int(10) DEFAULT NULL COMMENT 'Принадлежность к платформе в рамках версии',
  `filename` varchar(64) NOT NULL DEFAULT '' COMMENT 'Оригинальное имя файла',
  `filesize` int(11) unsigned NOT NULL DEFAULT '0' COMMENT 'Размер в байтах загруженого файла',
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Файл обновлен или загружен'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Файлы программного обеспечения';

-- --------------------------------------------------------

--
-- Структура таблицы `versions`
--

CREATE TABLE IF NOT EXISTS `versions` (
  `id` int(10) NOT NULL COMMENT 'Идентификатор версии',
  `name` varchar(150) NOT NULL DEFAULT '' COMMENT 'Название версии',
  `currencyid` int(10) DEFAULT NULL COMMENT 'Идентификатор фалюты для продукта',
  `filepath` varchar(150) NOT NULL DEFAULT '' COMMENT 'Путь для хранения файлов',
  `mainstream` tinyint(1) DEFAULT NULL COMMENT 'Основная текущая версия. Может быть установлена только для одной записи',
  `archive` tinyint(1) NOT NULL DEFAULT '0' COMMENT '1 - версия удалена'
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='Доступные версии';

--
-- Дамп данных таблицы `versions`
--

INSERT INTO `versions` (`id`, `name`, `currencyid`, `filepath`, `mainstream`, `archive`) VALUES
(1, 'Версия по умолчанию', 1, '', NULL, 0);

--
-- Триггеры `versions`
--
DELIMITER $$
CREATE TRIGGER `client_added_versions` AFTER INSERT ON `versions`
 FOR EACH ROW BEGIN
	
	DECLARE l_name varchar(30);
    DECLARE l_groupid int;
    DECLARE done boolean default FALSE;
    
    DECLARE fields_list CURSOR FOR SELECT `name`, `groupid` FROM `fields` WHERE `getvaluesfrom`=1;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN fields_list;
    FETCH fields_list INTO l_name, l_groupid;
    WHILE NOT done DO
    	INSERT INTO `fields_staff` SET `name` = l_name, `groupid`=l_groupid, `value`=NEW.`name`, `filter`=NEW.`id`;
        SET done = FALSE;
        FETCH fields_list INTO l_name, l_groupid;
    END WHILE;
	
END
$$
DELIMITER ;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `activations`
--
ALTER TABLE `activations`
  ADD KEY `activated` (`activated`),
  ADD KEY `keyid` (`keyid`),
  ADD KEY `clientid` (`clientid`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `banned`
--
ALTER TABLE `banned`
  ADD PRIMARY KEY (`from_ip`);

--
-- Индексы таблицы `calls_stat`
--
ALTER TABLE `calls_stat`
  ADD PRIMARY KEY (`id`),
  ADD KEY `clientid` (`clientid`);

--
-- Индексы таблицы `changelog`
--
ALTER TABLE `changelog`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `versionid` (`versionid`,`tag`);

--
-- Индексы таблицы `clients`
--
ALTER TABLE `clients`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `login` (`login`,`archive`),
  ADD KEY `name` (`name`),
  ADD KEY `phone` (`phone`),
  ADD KEY `email` (`email`),
  ADD KEY `classid` (`classid`);

--
-- Индексы таблицы `client_classes`
--
ALTER TABLE `client_classes`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `client_documents`
--
ALTER TABLE `client_documents`
  ADD PRIMARY KEY (`id`),
  ADD KEY `managerid` (`managerid`),
  ADD KEY `clientid` (`clientid`);

--
-- Индексы таблицы `client_fields_vals`
--
ALTER TABLE `client_fields_vals`
  ADD UNIQUE KEY `idx` (`idx`,`name`,`clientid`),
  ADD KEY `strvalue` (`strvalue`),
  ADD KEY `groupid` (`groupid`),
  ADD KEY `clientid` (`clientid`),
  ADD KEY `name` (`name`),
  ADD KEY `idxvalue` (`idxvalue`);

--
-- Индексы таблицы `client_infoposts`
--
ALTER TABLE `client_infoposts`
  ADD PRIMARY KEY (`clientid`,`infopostid`),
  ADD KEY `infopostid` (`infopostid`);

--
-- Индексы таблицы `client_keys`
--
ALTER TABLE `client_keys`
  ADD PRIMARY KEY (`clientid`,`keyid`,`versionid`),
  ADD KEY `keyid` (`keyid`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `client_key_platforms`
--
ALTER TABLE `client_key_platforms`
  ADD PRIMARY KEY (`clientid`,`keyid`,`platformid`),
  ADD KEY `keyid` (`keyid`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `client_mail`
--
ALTER TABLE `client_mail`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mail` (`filename`,`clientid`),
  ADD KEY `msg_id` (`msg_id`),
  ADD KEY `managerid` (`managerid`),
  ADD KEY `clientid` (`clientid`);

--
-- Индексы таблицы `client_platforms`
--
ALTER TABLE `client_platforms`
  ADD PRIMARY KEY (`clientid`,`platformid`),
  ADD KEY `versionid` (`versionid`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `client_service_packs`
--
ALTER TABLE `client_service_packs`
  ADD PRIMARY KEY (`clientid`,`serviceid`),
  ADD KEY `serviceid` (`serviceid`);

--
-- Индексы таблицы `client_sessions`
--
ALTER TABLE `client_sessions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `client_id` (`client_id`);

--
-- Индексы таблицы `commerce_offer_templates`
--
ALTER TABLE `commerce_offer_templates`
  ADD PRIMARY KEY (`id`),
  ADD KEY `versionid` (`versionid`),
  ADD KEY `price_regionid` (`price_regionid`);

--
-- Индексы таблицы `currency`
--
ALTER TABLE `currency`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `main` (`main`,`archive`);

--
-- Индексы таблицы `currency_rate`
--
ALTER TABLE `currency_rate`
  ADD PRIMARY KEY (`curid`,`period`);

--
-- Индексы таблицы `documents`
--
ALTER TABLE `documents`
  ADD PRIMARY KEY (`id`),
  ADD KEY `template` (`template`),
  ADD KEY `doc_number` (`doc_number`,`template`),
  ADD KEY `doc_number_2` (`doc_number`,`templateid`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `document_params`
--
ALTER TABLE `document_params`
  ADD KEY `documentid` (`documentid`);

--
-- Индексы таблицы `duty_events`
--
ALTER TABLE `duty_events`
  ADD PRIMARY KEY (`id`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `events_log`
--
ALTER TABLE `events_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `type` (`type`),
  ADD KEY `personid` (`personid`);

--
-- Индексы таблицы `events_log_detail`
--
ALTER TABLE `events_log_detail`
  ADD KEY `eventid` (`eventid`);

--
-- Индексы таблицы `fields`
--
ALTER TABLE `fields`
  ADD PRIMARY KEY (`name`),
  ADD KEY `groupid` (`groupid`);

--
-- Индексы таблицы `fields_groups`
--
ALTER TABLE `fields_groups`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `fields_staff`
--
ALTER TABLE `fields_staff`
  ADD PRIMARY KEY (`idx`),
  ADD KEY `name` (`name`),
  ADD KEY `groupid` (`groupid`);

--
-- Индексы таблицы `filters`
--
ALTER TABLE `filters`
  ADD PRIMARY KEY (`id`),
  ADD KEY `ownerid` (`ownerid`);

--
-- Индексы таблицы `filter_rules`
--
ALTER TABLE `filter_rules`
  ADD PRIMARY KEY (`id`),
  ADD KEY `filterid` (`filterid`);

--
-- Индексы таблицы `groups`
--
ALTER TABLE `groups`
  ADD PRIMARY KEY (`id`),
  ADD KEY `leaderid` (`leaderid`);

--
-- Индексы таблицы `infoposts`
--
ALTER TABLE `infoposts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `infoposts_client_class`
--
ALTER TABLE `infoposts_client_class`
  ADD KEY `infopostid` (`infopostid`),
  ADD KEY `clientclassid` (`clientclassid`);

--
-- Индексы таблицы `knowledges`
--
ALTER TABLE `knowledges`
  ADD PRIMARY KEY (`id`),
  ADD KEY `classid` (`classid`),
  ADD KEY `managerid` (`managerid`),
  ADD KEY `editorid` (`editorid`);

--
-- Индексы таблицы `knowledge_posts`
--
ALTER TABLE `knowledge_posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `managerid` (`managerid`),
  ADD KEY `knowledgeid` (`knowledgeid`);

--
-- Индексы таблицы `knowledge_post_files`
--
ALTER TABLE `knowledge_post_files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `postid` (`postid`),
  ADD KEY `knowledgeid` (`knowledgeid`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `license_keys`
--
ALTER TABLE `license_keys`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `key` (`key`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `license_keys_staff`
--
ALTER TABLE `license_keys_staff`
  ADD PRIMARY KEY (`keyid`,`optionid`),
  ADD KEY `optionid` (`optionid`);

--
-- Индексы таблицы `license_options`
--
ALTER TABLE `license_options`
  ADD PRIMARY KEY (`id`),
  ADD KEY `versionid` (`versionid`),
  ADD KEY `price_groupid` (`price_groupid`);

--
-- Индексы таблицы `mailing`
--
ALTER TABLE `mailing`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `mailing_client_class`
--
ALTER TABLE `mailing_client_class`
  ADD KEY `mailingid` (`mailingid`),
  ADD KEY `clientclassid` (`clientclassid`);

--
-- Индексы таблицы `mailing_posts`
--
ALTER TABLE `mailing_posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `mailingid` (`mailingid`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `managers`
--
ALTER TABLE `managers`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `login` (`login`,`archive`);

--
-- Индексы таблицы `manager_groups`
--
ALTER TABLE `manager_groups`
  ADD PRIMARY KEY (`groupid`,`managerid`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `manager_roles`
--
ALTER TABLE `manager_roles`
  ADD PRIMARY KEY (`roleid`,`managerid`),
  ADD KEY `managerid` (`managerid`);

--
-- Индексы таблицы `modules`
--
ALTER TABLE `modules`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `code` (`code`,`archive`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `notifications`
--
ALTER TABLE `notifications`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `options`
--
ALTER TABLE `options`
  ADD PRIMARY KEY (`name`);

--
-- Индексы таблицы `php_sessions`
--
ALTER TABLE `php_sessions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `expires` (`expires`);

--
-- Индексы таблицы `platforms`
--
ALTER TABLE `platforms`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `code` (`code`,`archive`),
  ADD KEY `versionid` (`versionid`),
  ADD KEY `price_groupid` (`price_groupid`);

--
-- Индексы таблицы `platform_cost`
--
ALTER TABLE `platform_cost`
  ADD PRIMARY KEY (`id`),
  ADD KEY `optionid` (`optionid`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `price_groups`
--
ALTER TABLE `price_groups`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `price_list`
--
ALTER TABLE `price_list`
  ADD PRIMARY KEY (`id`),
  ADD KEY `groupid` (`groupid`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `price_list_versions`
--
ALTER TABLE `price_list_versions`
  ADD PRIMARY KEY (`priceid`,`versionid`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `price_post_rules`
--
ALTER TABLE `price_post_rules`
  ADD PRIMARY KEY (`id`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `price_regions`
--
ALTER TABLE `price_regions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `curid` (`curid`);

--
-- Индексы таблицы `profiles_license`
--
ALTER TABLE `profiles_license`
  ADD PRIMARY KEY (`id`),
  ADD KEY `versionid` (`versionid`);

--
-- Индексы таблицы `profiles_license_client_classes`
--
ALTER TABLE `profiles_license_client_classes`
  ADD PRIMARY KEY (`liprofid`,`classid`),
  ADD KEY `classid` (`classid`);

--
-- Индексы таблицы `profiles_license_client_used`
--
ALTER TABLE `profiles_license_client_used`
  ADD PRIMARY KEY (`liprofid`,`clientid`),
  ADD KEY `clientid` (`clientid`);

--
-- Индексы таблицы `profiles_license_options`
--
ALTER TABLE `profiles_license_options`
  ADD PRIMARY KEY (`liprofid`,`loid`),
  ADD KEY `loid` (`loid`);

--
-- Индексы таблицы `profiles_license_platforms`
--
ALTER TABLE `profiles_license_platforms`
  ADD PRIMARY KEY (`liprofid`,`platformid`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `reports`
--
ALTER TABLE `reports`
  ADD PRIMARY KEY (`id`),
  ADD KEY `authorid` (`authorid`);

--
-- Индексы таблицы `report_form`
--
ALTER TABLE `report_form`
  ADD UNIQUE KEY `report` (`reportid`,`form_name`);

--
-- Индексы таблицы `report_history`
--
ALTER TABLE `report_history`
  ADD PRIMARY KEY (`id`),
  ADD KEY `reportid` (`reportid`),
  ADD KEY `authorid` (`authorid`);

--
-- Индексы таблицы `report_role`
--
ALTER TABLE `report_role`
  ADD UNIQUE KEY `report` (`reportid`,`roleid`),
  ADD KEY `roleid` (`roleid`);

--
-- Индексы таблицы `requests`
--
ALTER TABLE `requests`
  ADD PRIMARY KEY (`id`),
  ADD KEY `author_id` (`author_id`),
  ADD KEY `respondent_id` (`respondent_id`),
  ADD KEY `responsible_man` (`responsible_man`),
  ADD KEY `classid` (`classid`),
  ADD KEY `statusid` (`statusid`),
  ADD KEY `penaltyid` (`penaltyid`);

--
-- Индексы таблицы `requests_seen`
--
ALTER TABLE `requests_seen`
  ADD PRIMARY KEY (`requestid`,`managerid`);

--
-- Индексы таблицы `request_classes`
--
ALTER TABLE `request_classes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `responsibleid` (`responsibleid`);

--
-- Индексы таблицы `request_class_escalation`
--
ALTER TABLE `request_class_escalation`
  ADD PRIMARY KEY (`id`),
  ADD KEY `rcid` (`rcid`),
  ADD KEY `spid` (`spid`);

--
-- Индексы таблицы `request_class_penalty`
--
ALTER TABLE `request_class_penalty`
  ADD PRIMARY KEY (`spid`,`rcid`,`priority`);

--
-- Индексы таблицы `request_fields_vals`
--
ALTER TABLE `request_fields_vals`
  ADD UNIQUE KEY `idx` (`idx`,`name`,`requestid`),
  ADD KEY `strvalue` (`strvalue`),
  ADD KEY `groupid` (`groupid`),
  ADD KEY `requestid` (`requestid`),
  ADD KEY `name` (`name`),
  ADD KEY `idxvalue` (`idxvalue`);

--
-- Индексы таблицы `request_issues`
--
ALTER TABLE `request_issues`
  ADD PRIMARY KEY (`id`),
  ADD KEY `requestid` (`requestid`),
  ADD KEY `postid` (`postid`);

--
-- Индексы таблицы `request_penalty_history`
--
ALTER TABLE `request_penalty_history`
  ADD PRIMARY KEY (`id`),
  ADD KEY `requestid` (`requestid`),
  ADD KEY `spid` (`spid`);

--
-- Индексы таблицы `request_posts`
--
ALTER TABLE `request_posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `author_id` (`author_id`),
  ADD KEY `requestid` (`requestid`),
  ADD KEY `responsible_man` (`responsible_man`),
  ADD KEY `statusid` (`statusid`);

--
-- Индексы таблицы `request_post_files`
--
ALTER TABLE `request_post_files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `postid` (`postid`),
  ADD KEY `requestid` (`requestid`);

--
-- Индексы таблицы `request_statuses`
--
ALTER TABLE `request_statuses`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `archive` (`archive`,`new_default`),
  ADD UNIQUE KEY `archive_2` (`archive`,`answer_default`);

--
-- Индексы таблицы `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `role_objects`
--
ALTER TABLE `role_objects`
  ADD PRIMARY KEY (`roleid`,`object`);

--
-- Индексы таблицы `sbss_tasks`
--
ALTER TABLE `sbss_tasks`
  ADD PRIMARY KEY (`id`),
  ADD KEY `updated` (`updated`),
  ADD KEY `enabled` (`enabled`);

--
-- Индексы таблицы `service_packs`
--
ALTER TABLE `service_packs`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `code` (`code`,`archive`);

--
-- Индексы таблицы `service_pack_statuses`
--
ALTER TABLE `service_pack_statuses`
  ADD PRIMARY KEY (`spid`,`statusid`),
  ADD KEY `statusid` (`statusid`);

--
-- Индексы таблицы `software_download_history`
--
ALTER TABLE `software_download_history`
  ADD KEY `created` (`created`),
  ADD KEY `filename` (`filename`),
  ADD KEY `clientid` (`clientid`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `software_files`
--
ALTER TABLE `software_files`
  ADD UNIQUE KEY `versionid` (`versionid`,`filename`),
  ADD KEY `platformid` (`platformid`);

--
-- Индексы таблицы `versions`
--
ALTER TABLE `versions`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `mainstream` (`mainstream`,`archive`),
  ADD KEY `currencyid` (`currencyid`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `calls_stat`
--
ALTER TABLE `calls_stat`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `changelog`
--
ALTER TABLE `changelog`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификтор записи';
--
-- AUTO_INCREMENT для таблицы `clients`
--
ALTER TABLE `clients`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор клиента',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `client_classes`
--
ALTER TABLE `client_classes`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор класса',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `client_documents`
--
ALTER TABLE `client_documents`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер записи в таблице';
--
-- AUTO_INCREMENT для таблицы `client_mail`
--
ALTER TABLE `client_mail`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер записи';
--
-- AUTO_INCREMENT для таблицы `commerce_offer_templates`
--
ALTER TABLE `commerce_offer_templates`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `currency`
--
ALTER TABLE `currency`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор вылюты',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `documents`
--
ALTER TABLE `documents`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер документа';
--
-- AUTO_INCREMENT для таблицы `duty_events`
--
ALTER TABLE `duty_events`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `events_log`
--
ALTER TABLE `events_log`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи в журнале',AUTO_INCREMENT=6;
--
-- AUTO_INCREMENT для таблицы `events_log_detail`
--
ALTER TABLE `events_log_detail`
  MODIFY `eventid` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи в журнале';
--
-- AUTO_INCREMENT для таблицы `fields_groups`
--
ALTER TABLE `fields_groups`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор группы',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `fields_staff`
--
ALTER TABLE `fields_staff`
  MODIFY `idx` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор значение';
--
-- AUTO_INCREMENT для таблицы `filters`
--
ALTER TABLE `filters`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор фильтра';
--
-- AUTO_INCREMENT для таблицы `filter_rules`
--
ALTER TABLE `filter_rules`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `groups`
--
ALTER TABLE `groups`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер записи в таблице';
--
-- AUTO_INCREMENT для таблицы `infoposts`
--
ALTER TABLE `infoposts`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `knowledges`
--
ALTER TABLE `knowledges`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `knowledge_posts`
--
ALTER TABLE `knowledge_posts`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `knowledge_post_files`
--
ALTER TABLE `knowledge_post_files`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `license_keys`
--
ALTER TABLE `license_keys`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи о ключе';
--
-- AUTO_INCREMENT для таблицы `license_options`
--
ALTER TABLE `license_options`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор опции';
--
-- AUTO_INCREMENT для таблицы `mailing`
--
ALTER TABLE `mailing`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `mailing_posts`
--
ALTER TABLE `mailing_posts`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `managers`
--
ALTER TABLE `managers`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор менеджера',AUTO_INCREMENT=6;
--
-- AUTO_INCREMENT для таблицы `modules`
--
ALTER TABLE `modules`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор модуля';
--
-- AUTO_INCREMENT для таблицы `platforms`
--
ALTER TABLE `platforms`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор платформы',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `platform_cost`
--
ALTER TABLE `platform_cost`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `price_groups`
--
ALTER TABLE `price_groups`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT COMMENT 'Иденитификатор записи';
--
-- AUTO_INCREMENT для таблицы `price_list`
--
ALTER TABLE `price_list`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Иденитификатор записи';
--
-- AUTO_INCREMENT для таблицы `price_post_rules`
--
ALTER TABLE `price_post_rules`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `price_regions`
--
ALTER TABLE `price_regions`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор региона';
--
-- AUTO_INCREMENT для таблицы `profiles_license`
--
ALTER TABLE `profiles_license`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор профиля';
--
-- AUTO_INCREMENT для таблицы `reports`
--
ALTER TABLE `reports`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `report_history`
--
ALTER TABLE `report_history`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `requests`
--
ALTER TABLE `requests`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи',AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT для таблицы `request_classes`
--
ALTER TABLE `request_classes`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи в таблице',AUTO_INCREMENT=8;
--
-- AUTO_INCREMENT для таблицы `request_class_escalation`
--
ALTER TABLE `request_class_escalation`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи в таблице';
--
-- AUTO_INCREMENT для таблицы `request_issues`
--
ALTER TABLE `request_issues`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `request_penalty_history`
--
ALTER TABLE `request_penalty_history`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи в таблице';
--
-- AUTO_INCREMENT для таблицы `request_posts`
--
ALTER TABLE `request_posts`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи',AUTO_INCREMENT=18;
--
-- AUTO_INCREMENT для таблицы `request_post_files`
--
ALTER TABLE `request_post_files`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи';
--
-- AUTO_INCREMENT для таблицы `request_statuses`
--
ALTER TABLE `request_statuses`
  MODIFY `id` int(4) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор записи статуса',AUTO_INCREMENT=5;
--
-- AUTO_INCREMENT для таблицы `roles`
--
ALTER TABLE `roles`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер записи в таблице',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `sbss_tasks`
--
ALTER TABLE `sbss_tasks`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор задачи';
--
-- AUTO_INCREMENT для таблицы `service_packs`
--
ALTER TABLE `service_packs`
  MODIFY `id` int(5) NOT NULL AUTO_INCREMENT COMMENT 'Порядковый номер записи в таблице',AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT для таблицы `versions`
--
ALTER TABLE `versions`
  MODIFY `id` int(10) NOT NULL AUTO_INCREMENT COMMENT 'Идентификатор версии',AUTO_INCREMENT=2;
--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `activations`
--
ALTER TABLE `activations`
  ADD CONSTRAINT `activations_ibfk_1` FOREIGN KEY (`keyid`) REFERENCES `license_keys` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `activations_ibfk_2` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `activations_ibfk_3` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `calls_stat`
--
ALTER TABLE `calls_stat`
  ADD CONSTRAINT `calls_stat_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`);

--
-- Ограничения внешнего ключа таблицы `changelog`
--
ALTER TABLE `changelog`
  ADD CONSTRAINT `changelog_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`);

--
-- Ограничения внешнего ключа таблицы `clients`
--
ALTER TABLE `clients`
  ADD CONSTRAINT `clients_ibfk_1` FOREIGN KEY (`classid`) REFERENCES `client_classes` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_documents`
--
ALTER TABLE `client_documents`
  ADD CONSTRAINT `client_documents_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`),
  ADD CONSTRAINT `client_documents_ibfk_2` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_fields_vals`
--
ALTER TABLE `client_fields_vals`
  ADD CONSTRAINT `client_fields_vals_ibfk_1` FOREIGN KEY (`groupid`) REFERENCES `fields_groups` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `client_fields_vals_ibfk_2` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `client_fields_vals_ibfk_3` FOREIGN KEY (`name`) REFERENCES `fields` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `client_fields_vals_ibfk_4` FOREIGN KEY (`idxvalue`) REFERENCES `fields_staff` (`idx`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `client_infoposts`
--
ALTER TABLE `client_infoposts`
  ADD CONSTRAINT `client_infoposts_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`),
  ADD CONSTRAINT `client_infoposts_ibfk_2` FOREIGN KEY (`infopostid`) REFERENCES `infoposts` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_keys`
--
ALTER TABLE `client_keys`
  ADD CONSTRAINT `client_keys_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`),
  ADD CONSTRAINT `client_keys_ibfk_2` FOREIGN KEY (`keyid`) REFERENCES `license_keys` (`id`),
  ADD CONSTRAINT `client_keys_ibfk_3` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_key_platforms`
--
ALTER TABLE `client_key_platforms`
  ADD CONSTRAINT `client_key_platforms_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`),
  ADD CONSTRAINT `client_key_platforms_ibfk_2` FOREIGN KEY (`keyid`) REFERENCES `license_keys` (`id`),
  ADD CONSTRAINT `client_key_platforms_ibfk_3` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_mail`
--
ALTER TABLE `client_mail`
  ADD CONSTRAINT `client_mail_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`),
  ADD CONSTRAINT `client_mail_ibfk_2` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_platforms`
--
ALTER TABLE `client_platforms`
  ADD CONSTRAINT `client_platforms_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`),
  ADD CONSTRAINT `client_platforms_ibfk_2` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`),
  ADD CONSTRAINT `client_platforms_ibfk_3` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`);

--
-- Ограничения внешнего ключа таблицы `client_service_packs`
--
ALTER TABLE `client_service_packs`
  ADD CONSTRAINT `client_service_packs_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`),
  ADD CONSTRAINT `client_service_packs_ibfk_2` FOREIGN KEY (`serviceid`) REFERENCES `service_packs` (`id`);

--
-- Ограничения внешнего ключа таблицы `commerce_offer_templates`
--
ALTER TABLE `commerce_offer_templates`
  ADD CONSTRAINT `commerce_offer_templates_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `commerce_offer_templates_ibfk_2` FOREIGN KEY (`price_regionid`) REFERENCES `price_regions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `currency_rate`
--
ALTER TABLE `currency_rate`
  ADD CONSTRAINT `currency_rate_ibfk_1` FOREIGN KEY (`curid`) REFERENCES `currency` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `documents`
--
ALTER TABLE `documents`
  ADD CONSTRAINT `documents_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `document_params`
--
ALTER TABLE `document_params`
  ADD CONSTRAINT `document_params_ibfk_1` FOREIGN KEY (`documentid`) REFERENCES `documents` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `duty_events`
--
ALTER TABLE `duty_events`
  ADD CONSTRAINT `duty_events_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `events_log_detail`
--
ALTER TABLE `events_log_detail`
  ADD CONSTRAINT `events_log_detail_ibfk_1` FOREIGN KEY (`eventid`) REFERENCES `events_log` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `fields`
--
ALTER TABLE `fields`
  ADD CONSTRAINT `fields_ibfk_1` FOREIGN KEY (`groupid`) REFERENCES `fields_groups` (`id`) ON DELETE SET NULL;

--
-- Ограничения внешнего ключа таблицы `fields_staff`
--
ALTER TABLE `fields_staff`
  ADD CONSTRAINT `fields_staff_ibfk_1` FOREIGN KEY (`name`) REFERENCES `fields` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `fields_staff_ibfk_2` FOREIGN KEY (`groupid`) REFERENCES `fields_groups` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `filters`
--
ALTER TABLE `filters`
  ADD CONSTRAINT `filters_ibfk_1` FOREIGN KEY (`ownerid`) REFERENCES `managers` (`id`) ON DELETE SET NULL;

--
-- Ограничения внешнего ключа таблицы `filter_rules`
--
ALTER TABLE `filter_rules`
  ADD CONSTRAINT `filter_rules_ibfk_1` FOREIGN KEY (`filterid`) REFERENCES `filters` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `groups`
--
ALTER TABLE `groups`
  ADD CONSTRAINT `groups_ibfk_1` FOREIGN KEY (`leaderid`) REFERENCES `managers` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `infoposts`
--
ALTER TABLE `infoposts`
  ADD CONSTRAINT `infoposts_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `infoposts_client_class`
--
ALTER TABLE `infoposts_client_class`
  ADD CONSTRAINT `infoposts_client_class_ibfk_1` FOREIGN KEY (`infopostid`) REFERENCES `infoposts` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `infoposts_client_class_ibfk_2` FOREIGN KEY (`clientclassid`) REFERENCES `client_classes` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `knowledges`
--
ALTER TABLE `knowledges`
  ADD CONSTRAINT `knowledges_ibfk_1` FOREIGN KEY (`classid`) REFERENCES `request_classes` (`id`),
  ADD CONSTRAINT `knowledges_ibfk_2` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`),
  ADD CONSTRAINT `knowledges_ibfk_3` FOREIGN KEY (`editorid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `knowledge_posts`
--
ALTER TABLE `knowledge_posts`
  ADD CONSTRAINT `knowledge_posts_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `knowledge_posts_ibfk_2` FOREIGN KEY (`knowledgeid`) REFERENCES `knowledges` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `knowledge_post_files`
--
ALTER TABLE `knowledge_post_files`
  ADD CONSTRAINT `knowledge_post_files_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `knowledge_posts` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `knowledge_post_files_ibfk_2` FOREIGN KEY (`knowledgeid`) REFERENCES `knowledges` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `knowledge_post_files_ibfk_3` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `license_keys`
--
ALTER TABLE `license_keys`
  ADD CONSTRAINT `license_keys_ibfk_1` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `license_keys_staff`
--
ALTER TABLE `license_keys_staff`
  ADD CONSTRAINT `license_keys_staff_ibfk_1` FOREIGN KEY (`keyid`) REFERENCES `license_keys` (`id`),
  ADD CONSTRAINT `license_keys_staff_ibfk_2` FOREIGN KEY (`optionid`) REFERENCES `license_options` (`id`);

--
-- Ограничения внешнего ключа таблицы `license_options`
--
ALTER TABLE `license_options`
  ADD CONSTRAINT `license_options_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `license_options_ibfk_2` FOREIGN KEY (`price_groupid`) REFERENCES `price_groups` (`id`);

--
-- Ограничения внешнего ключа таблицы `mailing_client_class`
--
ALTER TABLE `mailing_client_class`
  ADD CONSTRAINT `mailing_client_class_ibfk_1` FOREIGN KEY (`mailingid`) REFERENCES `mailing` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `mailing_client_class_ibfk_2` FOREIGN KEY (`clientclassid`) REFERENCES `client_classes` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `mailing_posts`
--
ALTER TABLE `mailing_posts`
  ADD CONSTRAINT `mailing_posts_ibfk_1` FOREIGN KEY (`mailingid`) REFERENCES `mailing` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `mailing_posts_ibfk_2` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `manager_groups`
--
ALTER TABLE `manager_groups`
  ADD CONSTRAINT `manager_groups_ibfk_1` FOREIGN KEY (`groupid`) REFERENCES `groups` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `manager_groups_ibfk_2` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `manager_roles`
--
ALTER TABLE `manager_roles`
  ADD CONSTRAINT `manager_roles_ibfk_1` FOREIGN KEY (`roleid`) REFERENCES `roles` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `manager_roles_ibfk_2` FOREIGN KEY (`managerid`) REFERENCES `managers` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `modules`
--
ALTER TABLE `modules`
  ADD CONSTRAINT `modules_ibfk_1` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`);

--
-- Ограничения внешнего ключа таблицы `platforms`
--
ALTER TABLE `platforms`
  ADD CONSTRAINT `platforms_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `platforms_ibfk_2` FOREIGN KEY (`price_groupid`) REFERENCES `price_groups` (`id`);

--
-- Ограничения внешнего ключа таблицы `platform_cost`
--
ALTER TABLE `platform_cost`
  ADD CONSTRAINT `platform_cost_ibfk_1` FOREIGN KEY (`optionid`) REFERENCES `license_options` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `platform_cost_ibfk_2` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `price_list`
--
ALTER TABLE `price_list`
  ADD CONSTRAINT `price_list_ibfk_1` FOREIGN KEY (`groupid`) REFERENCES `price_groups` (`id`),
  ADD CONSTRAINT `price_list_ibfk_2` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `price_list_versions`
--
ALTER TABLE `price_list_versions`
  ADD CONSTRAINT `price_list_versions_ibfk_1` FOREIGN KEY (`priceid`) REFERENCES `price_list` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `price_list_versions_ibfk_2` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `price_post_rules`
--
ALTER TABLE `price_post_rules`
  ADD CONSTRAINT `price_post_rules_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `price_regions`
--
ALTER TABLE `price_regions`
  ADD CONSTRAINT `price_regions_ibfk_1` FOREIGN KEY (`curid`) REFERENCES `currency` (`id`);

--
-- Ограничения внешнего ключа таблицы `profiles_license`
--
ALTER TABLE `profiles_license`
  ADD CONSTRAINT `profiles_license_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `profiles_license_client_classes`
--
ALTER TABLE `profiles_license_client_classes`
  ADD CONSTRAINT `profiles_license_client_classes_ibfk_1` FOREIGN KEY (`liprofid`) REFERENCES `profiles_license` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profiles_license_client_classes_ibfk_2` FOREIGN KEY (`classid`) REFERENCES `client_classes` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `profiles_license_client_used`
--
ALTER TABLE `profiles_license_client_used`
  ADD CONSTRAINT `profiles_license_client_used_ibfk_1` FOREIGN KEY (`liprofid`) REFERENCES `profiles_license` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profiles_license_client_used_ibfk_2` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `profiles_license_options`
--
ALTER TABLE `profiles_license_options`
  ADD CONSTRAINT `profiles_license_options_ibfk_1` FOREIGN KEY (`liprofid`) REFERENCES `profiles_license` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profiles_license_options_ibfk_2` FOREIGN KEY (`loid`) REFERENCES `license_options` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `profiles_license_platforms`
--
ALTER TABLE `profiles_license_platforms`
  ADD CONSTRAINT `profiles_license_platforms_ibfk_1` FOREIGN KEY (`liprofid`) REFERENCES `profiles_license` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profiles_license_platforms_ibfk_2` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `reports`
--
ALTER TABLE `reports`
  ADD CONSTRAINT `reports_ibfk_1` FOREIGN KEY (`authorid`) REFERENCES `managers` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `report_form`
--
ALTER TABLE `report_form`
  ADD CONSTRAINT `report_form_ibfk_1` FOREIGN KEY (`reportid`) REFERENCES `reports` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `report_history`
--
ALTER TABLE `report_history`
  ADD CONSTRAINT `report_history_ibfk_1` FOREIGN KEY (`reportid`) REFERENCES `reports` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `report_history_ibfk_2` FOREIGN KEY (`authorid`) REFERENCES `managers` (`id`) ON DELETE SET NULL;

--
-- Ограничения внешнего ключа таблицы `report_role`
--
ALTER TABLE `report_role`
  ADD CONSTRAINT `report_role_ibfk_1` FOREIGN KEY (`roleid`) REFERENCES `roles` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `report_role_ibfk_2` FOREIGN KEY (`reportid`) REFERENCES `reports` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `requests`
--
ALTER TABLE `requests`
  ADD CONSTRAINT `requests_ibfk_1` FOREIGN KEY (`responsible_man`) REFERENCES `managers` (`id`),
  ADD CONSTRAINT `requests_ibfk_2` FOREIGN KEY (`classid`) REFERENCES `request_classes` (`id`),
  ADD CONSTRAINT `requests_ibfk_3` FOREIGN KEY (`statusid`) REFERENCES `request_statuses` (`id`),
  ADD CONSTRAINT `requests_ibfk_4` FOREIGN KEY (`penaltyid`) REFERENCES `request_penalty_history` (`id`) ON DELETE SET NULL;

--
-- Ограничения внешнего ключа таблицы `request_classes`
--
ALTER TABLE `request_classes`
  ADD CONSTRAINT `request_classes_ibfk_1` FOREIGN KEY (`responsibleid`) REFERENCES `managers` (`id`);

--
-- Ограничения внешнего ключа таблицы `request_class_escalation`
--
ALTER TABLE `request_class_escalation`
  ADD CONSTRAINT `request_class_escalation_ibfk_1` FOREIGN KEY (`rcid`) REFERENCES `request_classes` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_class_escalation_ibfk_2` FOREIGN KEY (`spid`) REFERENCES `service_packs` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `request_class_penalty`
--
ALTER TABLE `request_class_penalty`
  ADD CONSTRAINT `request_class_penalty_ibfk_1` FOREIGN KEY (`spid`) REFERENCES `service_packs` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `request_fields_vals`
--
ALTER TABLE `request_fields_vals`
  ADD CONSTRAINT `request_fields_vals_ibfk_1` FOREIGN KEY (`groupid`) REFERENCES `fields_groups` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_fields_vals_ibfk_2` FOREIGN KEY (`requestid`) REFERENCES `requests` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_fields_vals_ibfk_3` FOREIGN KEY (`name`) REFERENCES `fields` (`name`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `request_fields_vals_ibfk_4` FOREIGN KEY (`idxvalue`) REFERENCES `fields_staff` (`idx`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `request_issues`
--
ALTER TABLE `request_issues`
  ADD CONSTRAINT `request_issues_ibfk_1` FOREIGN KEY (`requestid`) REFERENCES `requests` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_issues_ibfk_2` FOREIGN KEY (`postid`) REFERENCES `request_posts` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `request_penalty_history`
--
ALTER TABLE `request_penalty_history`
  ADD CONSTRAINT `request_penalty_history_ibfk_1` FOREIGN KEY (`requestid`) REFERENCES `requests` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_penalty_history_ibfk_2` FOREIGN KEY (`spid`) REFERENCES `service_packs` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `request_posts`
--
ALTER TABLE `request_posts`
  ADD CONSTRAINT `request_posts_ibfk_1` FOREIGN KEY (`requestid`) REFERENCES `requests` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_posts_ibfk_2` FOREIGN KEY (`responsible_man`) REFERENCES `managers` (`id`),
  ADD CONSTRAINT `request_posts_ibfk_3` FOREIGN KEY (`statusid`) REFERENCES `request_statuses` (`id`);

--
-- Ограничения внешнего ключа таблицы `request_post_files`
--
ALTER TABLE `request_post_files`
  ADD CONSTRAINT `request_post_files_ibfk_1` FOREIGN KEY (`postid`) REFERENCES `request_posts` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `request_post_files_ibfk_2` FOREIGN KEY (`requestid`) REFERENCES `requests` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `role_objects`
--
ALTER TABLE `role_objects`
  ADD CONSTRAINT `role_objects_ibfk_1` FOREIGN KEY (`roleid`) REFERENCES `roles` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `service_pack_statuses`
--
ALTER TABLE `service_pack_statuses`
  ADD CONSTRAINT `service_pack_statuses_ibfk_1` FOREIGN KEY (`spid`) REFERENCES `service_packs` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `service_pack_statuses_ibfk_2` FOREIGN KEY (`statusid`) REFERENCES `request_statuses` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `software_download_history`
--
ALTER TABLE `software_download_history`
  ADD CONSTRAINT `software_download_history_ibfk_1` FOREIGN KEY (`clientid`) REFERENCES `clients` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `software_download_history_ibfk_2` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `software_files`
--
ALTER TABLE `software_files`
  ADD CONSTRAINT `software_files_ibfk_1` FOREIGN KEY (`versionid`) REFERENCES `versions` (`id`),
  ADD CONSTRAINT `software_files_ibfk_2` FOREIGN KEY (`platformid`) REFERENCES `platforms` (`id`);

--
-- Ограничения внешнего ключа таблицы `versions`
--
ALTER TABLE `versions`
  ADD CONSTRAINT `versions_ibfk_1` FOREIGN KEY (`currencyid`) REFERENCES `currency` (`id`);

DELIMITER $$
--
-- События
--
CREATE DEFINER=`root`@`localhost` EVENT `update_penalty_values` ON SCHEDULE EVERY 5 MINUTE STARTS '2016-03-16 15:02:40' ON COMPLETION NOT PRESERVE ENABLE DO CALL CALC_PENALTY_VALUE(0)$$

DELIMITER ;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
